{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Demo Download</p> <p>Doxide is a documentation generator for C++.</p> <ul> <li>It is configured with YAML, generates Markdown, and publishes HTML with a modern look and responsive design for desktop and mobile devices.</li> <li>It is open source under an Apache 2.0 license, and runs on Linux, Mac, and Windows.</li> <li>It is written in C++ so that its primary users, C++ developers, can readily contribute.</li> <li>C++ source code is documented with <code>/** comments */</code> containing <code>@commands</code>, as with the classic tool Doxygen. Many commands from Doxygen are already supported.</li> <li>C++ source code is parsed with Tree-sitter, the same parser used by many syntax highlighters.</li> </ul> <p>By generating Markdown, Doxide opens C++ documentation to the whole wide world of static site generation tools and themes. There is particular support for MkDocs and the Material for MkDocs theme, as on the Doxide website. A little extra effort enables alternatives such as Jekyll and Hugo. Other formats such as PDF are possible too, via Pandoc.</p> <p>This is all very new, a humble attempt to modernize documentation for the C++ community. Further features will come, but feedback is sought and contributions very welcome. See the GitHub repository to report an issue or contribute a bug fix or feature, or contact Lawrence Murray ( ).</p>"},{"location":"command-line/","title":"Running","text":"<p>Commands are:</p> <code>doxide init</code> Initialize configuration files. Will prompt before replacing any existing files. <code>doxide build</code> Build documentation in the output directory. <code>doxide clean</code> Clean the output directory. <code>doxide help</code> Print usage information. <p>Command-line options are as follows. When provided, they override the same settings in the configuration file.</p> <code>--title</code> (default <code>Untitled</code>) Main page title. <code>--description</code> Main page description. <code>--output</code> (default <code>docs</code>) Output directory."},{"location":"configuring/","title":"Configuring","text":"<p>The <code>doxide.yaml</code> configuration file supports the following entries.</p> <code>title</code> Main page title. Overruled by command-line option <code>--title</code>. <code>description</code> Main page description. Overruled by command-line option <code>--description</code>. <code>output</code> (default <code>docs</code>) Output directory. Overruled by command-line option <code>--output</code>. <code>files</code> <p>List of source files from which to extract documentation. The following wildcards are supported for pattern matching:</p> Pattern Description <code>?</code> Any single character. <code>*</code> Zero or more characters, without directory recursion. <code>**</code> Zero or more characters, with directory recursion. <code>[]</code> Any characters between the square brackets. <code>[!]</code> Any characters not between the square brackets. <code>[a-z]</code> Any characters in the range <code>a</code> to <code>z</code>. <p>For example, <code>*.hpp</code> will match all files in the root directory with a file extension of <code>.hpp</code>, while <code>**/*.hpp</code> will match all files in subdirectories, recursively, with a file extension of <code>.hpp</code>.</p> <code>groups</code> <p>List of groups used to organize documentation. Each element of the list can further contain the keys:</p> <code>name</code> Name of the group. This is used to assign entities to the group using the <code>@ingroup</code> command. <code>title</code> Title of the group, used for display purposes. <code>description</code> Description of the group, used for display purposes. <code>groups</code> Further subgroups, following the same schema. <p>Example</p> <pre><code>title: Example\ndescription: Example configuration file.\noutput: docs\nfiles:\n- header.hpp\n- \"*/*.hpp\"  # quotes may be needed when using wildcards or other special characters\ngroups:\n- name: top\ntitle: Top-level group\ndescription: Description of the top-level group.\ngroups:\n- name: next\ntitle: Next-level group\ndescription: Description of the next-level group.\n- name: another\ntitle: Another top-level group.\ndescription: Demonstration of another top-level group.\n</code></pre>"},{"location":"getting-started/","title":"Starting","text":""},{"location":"getting-started/#initializing","title":"Initializing","text":"<p>Run, from within your source code directory: <pre><code>doxide init\n</code></pre> This will create a <code>doxide.yaml</code> configuration file, as well as some additional files for publishing with Material for MkDocs. To start, it is not necessary to modify any of these.</p> <p>Add at least <code>doxide.yaml</code> to version control, and the other files if you intend to use Material for MkDocs (highly recommended for a quick start---you can always try something else later).</p>"},{"location":"getting-started/#building","title":"Building","text":"<p>Build the Markdown documentation with: <pre><code>doxide build\n</code></pre> This will populate the output directory (default: <code>docs</code>).</p>"},{"location":"getting-started/#publishing","title":"Publishing","text":"<p>To publish your documentation with Material for MkDocs, use: <pre><code>mkdocs build\n</code></pre> This will populate the <code>site</code> subdirectory with HTML, CSS, and JavaScript files. This directory can be published.</p> <p>To serve the documentation locally, use: <pre><code>mkdocs serve\n</code></pre> and point your browser to the URL reported, usually <code>localhost:8000</code>.</p>"},{"location":"installation/","title":"Download","text":"<p>Follow the instructions below for your operating system.</p>"},{"location":"installation/#ubuntu","title":"Ubuntu","text":"Ubuntu 23.04 Lunar Lobster (amd64) <p>Install Doxide: <pre><code>echo 'deb http://download.indii.org/deb lunar main' | sudo tee /etc/apt/sources.list.d/indii.org.list\ncurl -fsSL https://download.indii.org/deb/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/indii.org.gpg &gt; /dev/null\nsudo apt update\nsudo apt install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p> Ubuntu 22.10 Kinetic Kudu (amd64) <p>Install Doxide: <pre><code>echo 'deb http://download.indii.org/deb kinetic main' | sudo tee /etc/apt/sources.list.d/indii.org.list\ncurl -fsSL https://download.indii.org/deb/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/indii.org.gpg &gt; /dev/null\nsudo apt update\nsudo apt install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p> Ubuntu 22.04 Jammy Jellyfish (amd64) <p>Install Doxide: <pre><code>echo 'deb http://download.indii.org/deb jammy main' | sudo tee /etc/apt/sources.list.d/indii.org.list\ncurl -fsSL https://download.indii.org/deb/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/indii.org.gpg &gt; /dev/null\nsudo apt update\nsudo apt install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p> Ubuntu 20.04 Focal Fossa (amd64) <p>Install Doxide: <pre><code>echo 'deb http://download.indii.org/deb focal main' | sudo tee /etc/apt/sources.list.d/indii.org.list\ncurl -fsSL https://download.indii.org/deb/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/indii.org.gpg &gt; /dev/null\nsudo apt update\nsudo apt install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p>"},{"location":"installation/#debian","title":"Debian","text":"Debian 12 Bookworm (amd64) <p>Install Doxide: <pre><code>echo 'deb http://download.indii.org/deb bookworm main' | sudo tee /etc/apt/sources.list.d/indii.org.list\ncurl -fsSL https://download.indii.org/deb/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/indii.org.gpg &gt; /dev/null\nsudo apt update\nsudo apt install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p> Debian 11 Bullseye (amd64) <p>Install Doxide: <pre><code>echo 'deb http://download.indii.org/deb bullseye main' | sudo tee /etc/apt/sources.list.d/indii.org.list\ncurl -fsSL https://download.indii.org/deb/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/indii.org.gpg &gt; /dev/null\nsudo apt update\nsudo apt install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p>"},{"location":"installation/#fedora","title":"Fedora","text":"Fedora 38 (x86_64) <p>Install Doxide: <pre><code>sudo dnf config-manager --add-repo https://download.indii.org/rpm/fedora/38/indii.org.repo\nsudo dnf update\nsudo dnf install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p> Fedora 37 (x86_64) <p>Install Doxide: <pre><code>sudo dnf config-manager --add-repo https://download.indii.org/rpm/fedora/37/indii.org.repo\nsudo dnf update\nsudo dnf install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p> Fedora 36 (x86_64) <p>Install Doxide: <pre><code>sudo dnf config-manager --add-repo https://download.indii.org/rpm/fedora/36/indii.org.repo\nsudo dnf update\nsudo dnf install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p> Fedora 35 (x86_64) <p>Install Doxide: <pre><code>sudo dnf config-manager --add-repo https://download.indii.org/rpm/fedora/35/indii.org.repo\nsudo dnf update\nsudo dnf install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p>"},{"location":"installation/#opensuse","title":"openSUSE","text":"openSUSE Tumbleweed (x86_64) <p>Install Doxide: <pre><code>sudo zypper addrepo https://download.indii.org/rpm/opensuse/tumbleweed/indii.org.repo\nsudo zypper refresh\nsudo zypper install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p>"},{"location":"installation/#mageia","title":"Mageia","text":"Mageia 8 (x86_64) <p>Install Doxide: <pre><code>sudo dnf config-manager --add-repo https://download.indii.org/rpm/mageia/8/indii.org.repo\nsudo dnf update\nsudo dnf install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p>"},{"location":"installation/#arch","title":"Arch","text":"<p>Available from the Arch User Repository (AUR).</p>"},{"location":"installation/#mac","title":"Mac","text":"<p>Install Homebrew if not already. Add the tap: <pre><code>brew tap lawmurray/all\nbrew install doxide\n</code></pre> Install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p>"},{"location":"installation/#windows","title":"Windows","text":"<p>Download and install Doxide, using the installer:</p> <p> Doxide installer</p> <p>or just download the <code>doxide.exe</code> executable and put it somewhere in your <code>PATH</code>, such as your working directory:</p> <p> Doxide executable</p> <p>If you have a working Python environment, install MkDocs and Material for MkDocs with <code>pip</code>: <pre><code>pip install mkdocs mkdocs-material\n</code></pre> Or, if you have a working Chocolatey environment, install MkDocs and Material for MkDocs with <code>choco</code>: <pre><code>choco install mkdocs mkdocs-material\n</code></pre></p> <p>Alternatively, you can use Windows Subsystem for Linux with one of the Linux distributions above and follow the instructions for it.</p> <p>Tip</p> <p>If you would like to contribute a Chocolatey package for Doxide, please see this ticket.</p>"},{"location":"installation/#others-install-from-source","title":"Others: Install from source","text":"<p>If a package is not available for your operating system or you have special requirements, you can install from source. See the README.md file for instructions.</p>"},{"location":"organizing/","title":"Organizing","text":"<p>Doxide organizes documentation by creating a main page, and one additional page for each namespace and type, organized hierarchically. Variables, functions and operators are added to the page of the namespace or class to which they belong. Macros are added to the main page. Only entities with documentation comments are included, with the exception of namespaces, which are included as long as they are non-empty.</p> <p>Organizing by namespace is not always appropriate. An additional (or alternative) structure may be provided with groups. It is also possible to add arbitrary extra pages.</p>"},{"location":"organizing/#groups","title":"Groups","text":"<p>Groups are for organizing documentation. A hierarchy of groups can be created by adding a  <code>groups</code> section to the <code>doxide.yaml</code> configuration file. Individual entities can then be assigne to a group by using the <code>@ingroup</code> command.</p> <p>Example</p> <p>Create a group by adding the following to the <code>doxide.yaml</code> configuration file: <pre><code>groups:\n- name: example\ntitle: Example\ndescription: Description of the group.\n</code></pre> Assign an entity to the group using the <code>@ingroup</code> command in its documentation comment: <pre><code>/**\n * A function.\n *\n * @ingroup example\n */\nvoid f();\n</code></pre></p> <p>The final documentation displays the entity in the group, and not on the main page, a namespace page, or elsewhere. Members of a class may not be assigned to a group (<code>@ingroup</code> is simply ignored); they are always included on the associated class page.</p> <p>If the assignment of groups leaves a namespace empty, it is removed from the final documentation. This allows organizing with groups to completely replace organizing with namespaces.</p>"},{"location":"organizing/#extra-pages","title":"Extra pages","text":"<p>Extra pages can be added to the documentation simply by adding extra Markdown files to the output directory (default: <code>docs</code>).</p> <p>Doxide distinguishes its own output files in the output directory by adding <code>generator: doxide</code> to the YAML frontmatter. When running the commands <code>doxide build</code> and <code>doxide clean</code>, it deletes or overwrites such files without prompting. It will not touch other files.</p> <p>Danger</p> <p>Clearly, you do not want to put <code>generator: doxide</code> in your extra pages, or they will be deleted!</p>"},{"location":"questions-and-answers/","title":"Q &amp; A","text":""},{"location":"questions-and-answers/#why-the-name","title":"Why the name?","text":"<p>The Doxygen portmanteau is worthy of a riff.</p>"},{"location":"questions-and-answers/#what-does-the-logo-represent","title":"What does the logo represent?","text":"<p>The logo is an oxygen atom from a chemistry model kit, the two holes being where you would connect it to other atoms to form a molecule (an oxide!). It is deliberately oriented to look like the face of some cute character.</p>"},{"location":"questions-and-answers/#does-doxide-support-programming-languages-other-than-c","title":"Does Doxide support programming languages other than C++?","text":"<p>Not yet, but it very possibly can. It almost certainly works for C already, although is untested in that regard, and some tweaks to the presentation may be desirable. For other programming languages, if they can be parsed with Tree-sitter, support is possible in principle, and contributions are welcome.</p>"},{"location":"questions-and-answers/#what-are-some-alternatives-to-doxide","title":"What are some alternatives to Doxide?","text":"<p>The advantages of Doxide are a modern look, YAML configuration, Markdown output, and accurate parsing of C++ with Tree-sitter. If this does not appeal, there are some other alternatives, also open source:</p> <ol> <li>Doxygen. It's an institution. Highly configurable. The downside is that the output might be considered dated.</li> <li>Doxygen Awesome, which provides a fresh look for Doxygen via an alternative style sheet.</li> <li>The combination of Doxygen + Breathe + Sphinx, which also provides a fresh look, by taking the XML output of Doxygen, converting it to reStructuredText with Breathe, then converting it to HTML with Sphinx.</li> <li>MrDox, which aims to be a replacement for Doxygen, using the clang parser.</li> </ol>"},{"location":"writing/","title":"Writing","text":"<p>Entities in C++ source code (e.g. classes, functions, operators, variables, macros) are documented by adding a documentation comment immediately preceding their declaration, typically in a header file. A documentation comment begins with <code>/**</code> rather than the usual <code>/*</code>, but ends with the usual <code>*/</code>. New lines may optionally start with an extra <code>*</code> character.</p> <p>The documentation can be formatted with Markdown, and include commands using the syntax <code>@command</code>.</p> <p>Example</p> <pre><code>/**\n * An example class with documentation. It might include a list:\n * \n * - first item,\n * - second item, and\n * - third item,\n *\n * or even a table:\n *\n * | Heading 1 | Heading 2 |\n * | --------- | --------- |\n * | Content 1 | Content 2 |\n */\nclass Example {\n//\n};\n\n/**\n * An example function with documentation. This time we use commands.\n *\n * @param x First argument.\n * @param y Second argument.\n *\n * @return The result.\n */\nint f(int x, int y);\n</code></pre>"},{"location":"writing/#commands","title":"Commands","text":"<p>The suggestion is to use Markdown wherever possible when writing documentation comments. Doxide provides a small set of commands that can be used to organize documentation (e.g. <code>@ingroup</code>) and to ensure consistent formatting for common elements (e.g. <code>@param</code>).</p> Command Description <code>@param name</code>, <code>@param[in] name</code>, <code>@param[out] name</code>, <code>@param[in,out] name</code> Document parameter <code>name</code>. The following paragraph is the description. The additional annotations <code>[in]</code>, <code>[out]</code> and <code>[in,out]</code> mark the parameter as an input (default), output or both input and output parameter. The following paragraph is the description. <code>@tparam</code> Document a template parameter <code>name</code>. <code>@return</code> Document the return value with the following paragraph. <code>@pre</code>, <code>@post</code> Document pre- or post-conditions with the following paragraph. <code>@throw name</code> Document an exception <code>name</code> with the following paragraph. <code>@see</code> Add a paragraph of \"see also\" references. The references themselves can be formatted in Markdown, using links if desired. <code>@anchor name</code> Insert anchor that can be linked to from elsewhere with the Markdown syntax <code>[text](#name)</code>. <code>@ingroup name</code> Add the entity to the group <code>name</code>. See organizing for more information. <code>@@</code> Escape: replaced with a single <code>@</code>. <code>@/</code> Escape: replaced with a single <code>/</code>. <p>Tip</p> <p>As a particular use case, comments within documentation comments are possible by escaping the closing sequence <code>*/</code> as <code>*@/</code>. This can be useful when providing example code within a documentation comment.</p>"},{"location":"writing/#migration-support","title":"Migration support","text":"<p>To assist in the migration of existing code bases to Doxide from other documentation tools, some additional support is provided:</p> <ul> <li> <p>The character <code>\\</code> may be used as an alternative to <code>@</code> to denote commands. When <code>\\</code> is used, unlike when <code>@</code> is used, no warning is given if the command is not found, and the command is output as-is. This is necessary to support LaTeX macros in mathematics without warning overload.</p> </li> <li> <p>The character <code>%</code> may be used as an escape for a single non-whitespace character (it is used to break automatic linking in Doxygen).</p> </li> </ul> <p>The following behaviors are implemented to assist in the migration of existing code bases. Recommended alternatives are provided for new code bases.</p> Command(s) Doxide behavior Recommended alternative <code>@e word</code>, <code>@em word</code>, <code>@a word</code> Replace with Markdown. Use Markdown emphasis: <code>*word*</code> <code>@b word</code> Replace with Markdown. Use Markdown bold: <code>**word**</code> <code>@c word</code>, <code>@p word</code> Replace with Markdown. Use Markdown inline code: <code>`word`</code> <code>@f$ ... @f$</code> Replace with Markdown. Use Markdown inline math: <code>$ ... $</code> <code>@f\\[ ... @f]</code> Replace with Markdown. Use Markdown display math: <code>$$ ... $$</code>. <code>@li</code>, <code>@arg</code> Replace with Markdown. Use Markdown unordered list item: <code>-</code> <code>@code ... @endcode</code>, <code>@verbatim ... @endverbatim</code> Replace with Markdown. Use Markdown display code: <code>``` ... ```</code>. <code>@attention</code>, <code>@bug</code>, <code>@example</code>, <code>@note</code>, <code>@todo</code>, <code>@warning</code>, <code>@remark</code>, <code>@remarks</code> Replace with Markdown. Use Markdown admonition: <code>!!! type</code>. <code>@ref name text</code> Replace with Markdown. Use Markdown link: <code>[text](#name)</code> <code>@image format file alt</code> Ignored. Use Markdown image: <code>![alt](file)</code> <code>@returns</code>, <code>@result</code> As <code>@return</code>. Use <code>@return</code>. <code>@throws</code> , <code>@exception</code> As <code>@throw</code>. Use <code>@throw</code>. <code>@sa</code> As <code>@see</code>. Use <code>@see</code>. <code>@brief</code>, <code>@short</code> Override one-sentence description. Make the first sentence of the documentation comment usable as a brief description. <code>@internal</code> Documentation comment and entity are hidden. Use a normal comment, rather than a documentation comment. <code>@defgroup</code> Ignored. Doxide handles groups differently, see below. <code>@file</code> Ignored. Doxide does not produce documentation for files. Incorporate into the documentation for another entity, or into a custom page. <code>@def MACRO</code> Ignored. Doxide does not run the preprocessor. Add a documentation comment immediately before the <code>#define</code>. <code>@var name</code>, <code>@fn name</code>, <code>@class name</code>, <code>@struct name</code>, <code>@union name</code>, <code>@enum name</code>,  <code>@typedef name</code>, <code>@namespace name</code>, <code>@interface name</code>, <code>@protocol name</code>, <code>@property name</code>. Ignored. Add a documentation comment immediately before the relevant entity."},{"location":"demo/","title":"Demo","text":""},{"location":"demo/#demo","title":"Demo","text":"<p>Demonstration of the features of Doxide.</p> Parsing Demonstration of some parsing capabilities, such as variables, functions, classes, enums, namespaces, templates, SFINAE, macros, etc. Presentation Demonstration of some presentation elements."},{"location":"demo/parsing/","title":"Parsing","text":""},{"location":"demo/parsing/#parsing","title":"Parsing","text":"<p>Demonstration of some parsing capabilities, such as variables, functions, classes, enums, namespaces, templates, SFINAE, macros, etc.</p>"},{"location":"demo/parsing/#types","title":"Types","text":"Name Description Class Test class. ClassTemplate Test class template. ClassWithMembers Class with members. Enum Test enumeration. EnumClass Test scoped enumeration. EnumStruct Test scoped enumeration. ForwardClass Forward class declaration. Struct Test struct. StructTemplate Test struct template. TypeAlias Test type alias. TypeAliasTemplate Test type alias template. TypeDef Test typedef. Union Test union. UnionTemplate Test union template."},{"location":"demo/parsing/#concepts","title":"Concepts","text":"Name Description Concept Test concept. TrivialConcept Test trivial concept."},{"location":"demo/parsing/#macros","title":"Macros","text":"Name Description MACRO Test macro. MACRO_WITH_ARGS Test macro with arguments."},{"location":"demo/parsing/#variables","title":"Variables","text":"Name Description ptr Test variable of pointer type. ref Test variable of reference type. w Test variable. x Test variable with initializer. y Test variable with parenthetical initializer. z Test variable with brace initializer."},{"location":"demo/parsing/#operators","title":"Operators","text":"Name Description operator+ Test operator. operator+ Test operator template. operator+ Test operator template with SFINAE. operator+ Test inline operator. operator+ Test inline operator template. operator+ Test inline operator template with SFINAE."},{"location":"demo/parsing/#functions","title":"Functions","text":"Name Description f Test function. f Test function that returns a reference. f Test function that returns a pointer. f Test function template. f Test function template with SFINAE. f Test inline function. f Test inline function template. f Test inline function template with SFINAE."},{"location":"demo/parsing/#concept-details","title":"Concept Details","text":""},{"location":"demo/parsing/#concept","title":"Concept","text":"<p>template&lt;class T&gt; concept Concept = std::is_arithmetic_v&lt;T&gt;</p> <p>Test concept.</p>"},{"location":"demo/parsing/#trivialconcept","title":"TrivialConcept","text":"<p>template&lt;class T&gt; concept TrivialConcept = true</p> <p>Test trivial concept.</p>"},{"location":"demo/parsing/#macro-details","title":"Macro Details","text":""},{"location":"demo/parsing/#macro","title":"MACRO","text":"<p>#define MACRO</p> <p>Test macro.</p>"},{"location":"demo/parsing/#macro_with_args","title":"MACRO_WITH_ARGS","text":"<p>#define MACRO_WITH_ARGS(x, y)</p> <p>Test macro with arguments.</p>"},{"location":"demo/parsing/#variable-details","title":"Variable Details","text":""},{"location":"demo/parsing/#ptr","title":"ptr","text":"<p>int* ptr</p> <p>Test variable of pointer type.</p>"},{"location":"demo/parsing/#ref","title":"ref","text":"<p>int&amp; ref</p> <p>Test variable of reference type.</p>"},{"location":"demo/parsing/#w","title":"w","text":"<p>int w</p> <p>Test variable.</p>"},{"location":"demo/parsing/#x","title":"x","text":"<p>int x</p> <p>Test variable with initializer.</p>"},{"location":"demo/parsing/#y","title":"y","text":"<p>int y</p> <p>Test variable with parenthetical initializer.</p>"},{"location":"demo/parsing/#z","title":"z","text":"<p>int z</p> <p>Test variable with brace initializer.</p>"},{"location":"demo/parsing/#operator-details","title":"Operator Details","text":""},{"location":"demo/parsing/#operator","title":"operator+","text":"<p>int operator+(int x, int y)</p> <p>Test operator.</p> <p>template&lt;class T&gt; T operator+(T x, T y)</p> <p>Test operator template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T operator+(T x, T y)</p> <p>Test operator template with SFINAE.</p> <p>inline int operator+(int x, int y)</p> <p>Test inline operator.</p> <p>template&lt;class T&gt; T operator+(T x, T y)</p> <p>Test inline operator template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T operator+(T x, T y)</p> <p>Test inline operator template with SFINAE.</p>"},{"location":"demo/parsing/#function-details","title":"Function Details","text":""},{"location":"demo/parsing/#f","title":"f","text":"<p>int f(int x, int y)</p> <p>Test function.</p> <p>int&amp; f(int x, int y)</p> <p>Test function that returns a reference.</p> <p>int* f(int x, int y)</p> <p>Test function that returns a pointer.</p> <p>template&lt;class T&gt; T f(T x, T y)</p> <p>Test function template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T f(T x, T y)</p> <p>Test function template with SFINAE.</p> <p>inline int f(int x, int y)</p> <p>Test inline function.</p> <p>template&lt;class T&gt; T f(T x, T y)</p> <p>Test inline function template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T f(T x, T y)</p> <p>Test inline function template with SFINAE.</p>"},{"location":"demo/parsing/Class/","title":"Class","text":""},{"location":"demo/parsing/Class/#class","title":"Class","text":"<p>class Class</p> <p>Test class.</p>"},{"location":"demo/parsing/ClassTemplate/","title":"ClassTemplate","text":""},{"location":"demo/parsing/ClassTemplate/#classtemplate","title":"ClassTemplate","text":"<p>template&lt;class T&gt; class ClassTemplate</p> <p>Test class template.</p>"},{"location":"demo/parsing/ClassWithMembers/","title":"ClassWithMembers","text":""},{"location":"demo/parsing/ClassWithMembers/#classwithmembers","title":"ClassWithMembers","text":"<p>class ClassWithMembers</p> <p>Class with members.</p>"},{"location":"demo/parsing/ClassWithMembers/#variables","title":"Variables","text":"Name Description w Test member variable. x Test member variable with initializer. z Test member variable with brace initializer. ref Test member variable of reference type. ptr Test member variable of pointer type. escapee Attempt to move a member out of its class with <code>@ingroup</code>, but should remain in <code>ClassWithMembers</code>."},{"location":"demo/parsing/ClassWithMembers/#operators","title":"Operators","text":"Name Description operator+ Test member operator. operator+ Test member operator template. operator+ Test member function template with SFINAE. operator+ Test inline member operator. operator+ Test inline member operator template. operator+ Test inline member operator template with SFINAE."},{"location":"demo/parsing/ClassWithMembers/#functions","title":"Functions","text":"Name Description f Test member function. f Test member function that returns a reference. f Test member function that returns a pointer. f Test member function template. f Test member function template with SFINAE. f Test inline member function. f Test inline member function template. f Test inline member function template with SFINAE."},{"location":"demo/parsing/ClassWithMembers/#variable-details","title":"Variable Details","text":""},{"location":"demo/parsing/ClassWithMembers/#escapee","title":"escapee","text":"<p>int escapee</p> <p>Attempt to move a member out of its class with <code>@ingroup</code>, but should remain in <code>ClassWithMembers</code>.</p>"},{"location":"demo/parsing/ClassWithMembers/#ptr","title":"ptr","text":"<p>int* ptr</p> <p>Test member variable of pointer type.</p>"},{"location":"demo/parsing/ClassWithMembers/#ref","title":"ref","text":"<p>int&amp; ref</p> <p>Test member variable of reference type.</p>"},{"location":"demo/parsing/ClassWithMembers/#w","title":"w","text":"<p>int w</p> <p>Test member variable.</p>"},{"location":"demo/parsing/ClassWithMembers/#x","title":"x","text":"<p>int x</p> <p>Test member variable with initializer.</p>"},{"location":"demo/parsing/ClassWithMembers/#z","title":"z","text":"<p>int z</p> <p>Test member variable with brace initializer.</p>"},{"location":"demo/parsing/ClassWithMembers/#operator-details","title":"Operator Details","text":""},{"location":"demo/parsing/ClassWithMembers/#operator","title":"operator+","text":"<p>int operator+(int x, int y)</p> <p>Test member operator.</p> <p>template&lt;class T&gt; T operator+(T x, T y)</p> <p>Test member operator template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T operator+(T x, T y)</p> <p>Test member function template with SFINAE.</p> <p>inline int operator+(int x, int y)</p> <p>Test inline member operator.</p> <p>template&lt;class T&gt; T operator+(T x, T y)</p> <p>Test inline member operator template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T operator+(T x, T y)</p> <p>Test inline member operator template with SFINAE.</p>"},{"location":"demo/parsing/ClassWithMembers/#function-details","title":"Function Details","text":""},{"location":"demo/parsing/ClassWithMembers/#f","title":"f","text":"<p>int f(int x, int y)</p> <p>Test member function.</p> <p>int&amp; f(int x, int y)</p> <p>Test member function that returns a reference.</p> <p>int* f(int x, int y)</p> <p>Test member function that returns a pointer.</p> <p>template&lt;class T&gt; T f(T x, T y)</p> <p>Test member function template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T f(T x, T y)</p> <p>Test member function template with SFINAE.</p> <p>inline int f(int x, int y)</p> <p>Test inline member function.</p> <p>template&lt;class T&gt; T f(T x, T y)</p> <p>Test inline member function template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T f(T x, T y)</p> <p>Test inline member function template with SFINAE.</p>"},{"location":"demo/parsing/Enum/","title":"Enum","text":""},{"location":"demo/parsing/Enum/#enum","title":"Enum","text":"<p>enum Enum</p> <p>Test enumeration.</p> FIRST First possibility. SECOND Second possibility. THIRD Third possibility."},{"location":"demo/parsing/EnumClass/","title":"EnumClass","text":""},{"location":"demo/parsing/EnumClass/#enumclass","title":"EnumClass","text":"<p>enum class EnumClass</p> <p>Test scoped enumeration.</p> FIRST First possibility. SECOND Second possibility. THIRD Third possibility."},{"location":"demo/parsing/EnumStruct/","title":"EnumStruct","text":""},{"location":"demo/parsing/EnumStruct/#enumstruct","title":"EnumStruct","text":"<p>enum struct EnumStruct</p> <p>Test scoped enumeration.</p> FIRST First possibility. SECOND Second possibility. THIRD Third possibility."},{"location":"demo/parsing/ForwardClass/","title":"ForwardClass","text":""},{"location":"demo/parsing/ForwardClass/#forwardclass","title":"ForwardClass","text":"<p>class ForwardClass</p> <p>Forward class declaration.</p>"},{"location":"demo/parsing/Struct/","title":"Struct","text":""},{"location":"demo/parsing/Struct/#struct","title":"Struct","text":"<p>struct Struct</p> <p>Test struct.</p>"},{"location":"demo/parsing/StructTemplate/","title":"StructTemplate","text":""},{"location":"demo/parsing/StructTemplate/#structtemplate","title":"StructTemplate","text":"<p>template&lt;class T&gt; struct StructTemplate</p> <p>Test struct template.</p>"},{"location":"demo/parsing/TypeAlias/","title":"TypeAlias","text":""},{"location":"demo/parsing/TypeAlias/#typealias","title":"TypeAlias","text":"<p>using TypeAlias = int</p> <p>Test type alias.</p>"},{"location":"demo/parsing/TypeAliasTemplate/","title":"TypeAliasTemplate","text":""},{"location":"demo/parsing/TypeAliasTemplate/#typealiastemplate","title":"TypeAliasTemplate","text":"<p>template&lt;class T&gt; using TypeAliasTemplate = int</p> <p>Test type alias template.</p>"},{"location":"demo/parsing/TypeDef/","title":"TypeDef","text":""},{"location":"demo/parsing/TypeDef/#typedef","title":"TypeDef","text":"<p>typedef int TypeDef</p> <p>Test typedef.</p>"},{"location":"demo/parsing/Union/","title":"Union","text":""},{"location":"demo/parsing/Union/#union","title":"Union","text":"<p>union Union</p> <p>Test union.</p>"},{"location":"demo/parsing/UnionTemplate/","title":"UnionTemplate","text":""},{"location":"demo/parsing/UnionTemplate/#uniontemplate","title":"UnionTemplate","text":"<p>template&lt;class T&gt; union UnionTemplate</p> <p>Test union template.</p>"},{"location":"demo/presentation/","title":"Presentation","text":""},{"location":"demo/presentation/#presentation","title":"Presentation","text":"<p>Demonstration of some presentation elements.</p>"},{"location":"demo/presentation/#functions","title":"Functions","text":"Name Description f Function with documentation demonstrating various presentation features. f Function demonstrating all possible annotations. g Function demonstrating a link."},{"location":"demo/presentation/#function-details","title":"Function Details","text":""},{"location":"demo/presentation/#f","title":"f","text":"<p>int f(int x, int y)</p> <p>Function with documentation demonstrating various presentation features.</p> <p>template&lt;class T&gt; int f(int x, int y, int&amp; z, int&amp; w)</p> <p>Function demonstrating all possible annotations.</p> Template parameter <code>T</code> Template parameter. Parameter <code>x</code> Input parameter. Parameter <code>y</code> Input parameter. Parameter <code>z</code> Output parameter. Parameter <code>w</code> Input-output parameter. Return Return value. Pre-condition Pre-condition. Post-condition Post-condition. Throw Exception."},{"location":"demo/presentation/#lists","title":"Lists","text":"<p>Itemized list:</p> <ul> <li>Itemized list item.</li> <li>Itemized list item.</li> <li>Itemized list item.</li> </ul> <p>Numbered list:</p> <ol> <li>Enumerated list item.</li> <li>Enumerated list item.</li> <li>Enumerated list item.</li> </ol>"},{"location":"demo/presentation/#tables","title":"Tables","text":"Column 1 Column 2 Column 3 Row 1, Column 1 Row 1, Column 2 Row 1, Column 3 Row 2, Column 1 Row 2, Column 2 Row 2, Column 3 Row 3, Column 1 Row 3, Column 2 Row 3, Column 3"},{"location":"demo/presentation/#code","title":"Code","text":"<pre><code>void f(int x, int y);\n</code></pre> <pre><code>/* nested comment in code */\nvoid f(int x, int y);\n</code></pre>"},{"location":"demo/presentation/#images","title":"Images","text":""},{"location":"demo/presentation/#admonitions","title":"Admonitions","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>"},{"location":"demo/presentation/#g","title":"g","text":"<p>int g()</p> <p>Function demonstrating a link.</p> See f"}]}