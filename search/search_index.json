{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Get Started <p>Doxide is a documentation generator for modern C++. It consumes C++ sources annotated with <code>/** documentation comments */</code> containing <code>@special_commands</code>, generates Markdown, and publishes for the web. Doxide is an alternative to Doxygen, but aims at a more modern look and feel, with responsive design for desktop and mobile devices\u2014just like this website.</p> <ul> <li>Doxide is configured with YAML, generates Markdown, and publishes HTML for the web.</li> <li>Doxide is written in C++ so that its primary users, C++ developers, can readily contribute. It uses Tree-sitter to parse C++.</li> <li>Doxide is open source under an Apache 2.0 license, and runs on Linux, Mac, and Windows.</li> <li>To ease migration from other documentation tools, many standard Doxygen commands are supported.</li> </ul> C++Output <pre><code>/**\n * An example.\n * \n * @tparam T Template parameter.\n * \n * @param x Input parameter.\n * @param[out] y Output parameter.\n * \n * @return Return value.\n * \n * @tip There are plenty more [demonstrations available](/demo)!\n */\ntemplate&lt;class T&gt;\nint f(int x, int&amp; y);\n</code></pre> <p>template&lt;class T&gt; int f(int x, int&amp; y)</p> <p>An example.</p> <code>T</code> Template parameter. <code>x</code> Input parameter. <code>y</code> Output parameter. Return Return value. <p>Tip</p> <p>There are plenty more demonstrations available!</p> <p>By generating Markdown, Doxide opens C++ documentation to the whole wide world of static site generation tools and themes. There is particular support for MkDocs and the Material for MkDocs theme, as on this website. A little extra effort enables alternative static site generation tools such as Jekyll and Hugo. Other formats such as PDF are possible too, via Pandoc.</p> <p>This is all very new, a humble attempt to modernize documentation for the C++ community. Development is active, feedback is sought, and contributions very welcome. See the GitHub repository to report an issue or contribute a bug fix or feature, or contact Lawrence Murray ( ).</p>"},{"location":"command-line/","title":"Command-line reference","text":"<p>Commands are:</p> <code>doxide init</code> Initialize configuration files. Will prompt before replacing any existing files. <code>doxide build</code> Build documentation in the output directory. <code>doxide clean</code> Clean the output directory. <code>doxide cover</code> Output (on <code>stdout</code>) zero-count line data for mixing with code coverage reports. <code>doxide help</code> Print usage information. <p>Command-line options are as follows. When provided, they override the same settings in the configuration file.</p> <code>--title</code> (default <code>Untitled</code>) Main page title. <code>--description</code> Main page description. <code>--output</code> (default <code>docs</code>) Output directory."},{"location":"configuring/","title":"Configuring Doxide","text":"<p>The <code>doxide.yaml</code> configuration file supports the following entries.</p> <code>title</code> Main page title. Overruled by command-line option <code>--title</code>. <code>description</code> Main page description. Overruled by command-line option <code>--description</code>. <code>output</code> (default <code>docs</code>) Output directory. Overruled by command-line option <code>--output</code>. <code>files</code> <p>List of source files from which to extract documentation. The following wildcards are supported for pattern matching:</p> Pattern Description <code>?</code> Any single character. <code>*</code> Zero or more characters, without directory recursion. <code>**</code> Zero or more characters, with directory recursion. <code>[]</code> Any characters between the square brackets. <code>[!]</code> Any characters not between the square brackets. <code>[a-z]</code> Any characters in the range <code>a</code> to <code>z</code>. <p>For example, <code>*.hpp</code> will match all files in the root directory with a file extension of <code>.hpp</code>, while <code>**/*.hpp</code> will match all files in subdirectories, recursively, with a file extension of <code>.hpp</code>.</p> <code>groups</code> <p>List of groups used to organize documentation. Each element of the list can further contain the keys:</p> <code>name</code> Name of the group. This is used to assign entities to the group using the <code>@ingroup</code> command. <code>title</code> Title of the group, used for display purposes. <code>description</code> Description of the group, used for display purposes. <code>groups</code> Further subgroups, following the same schema. <code>defines</code> Mapping of preprocessor symbol definitions, where keys are the symbols and values are their replacements. This may be used to troubleshoot parsing issues related to the use of preprocessor macros. <p>Example</p> <pre><code>title: Example\ndescription: Example configuration file.\noutput: docs\nfiles:\n  - header.hpp\n  - \"*/*.hpp\"  # quotes may be needed when using wildcards or other special characters\n  - \"**/*.hpp\"\ndefines:\n  SYMBOL: value\n  DEFINED_BUT_EMPTY_SYMBOL: \"\"      \ngroups:\n  - name: top\n    title: Top-level group\n    description: Description of the top-level group.\n    groups:\n      - name: next\n        title: Next-level group\n        description: Description of the next-level group.\n  - name: another\n    title: Another top-level group.\n    description: Demonstration of another top-level group.\n</code></pre>"},{"location":"contributing/","title":"Contributing to Doxide","text":"<p>Contributions to Doxide are welcome via a pull request to the GitHub repository. Similarly, bug reports and feature suggestions can be made by opening an issue, and questions asked by starting a discussion.</p> <p>There are many ways to contribute code to Doxide. To do so you will need knowledge of C++, and may need to learn how to use Tree-sitter to parse and query C++ source files. A brief how-to on the latter is given here .</p> <p>When developing Doxide, you will need to build it from source, and rebuild it from source after making any changes. See the README.md file for instructions on working from source.</p>"},{"location":"contributing/#using-tree-sitter","title":"Using Tree-sitter","text":"<p>Install the <code>tree-sitter</code> command-line interface. This will depend on your operating system. It is widely available in Linux distributions. Once installed you may need to configure it for the first time: <pre><code>tree-sitter init-config\n</code></pre></p> <p>There may not be a C++ parser installed by default, and at any rate Doxide is written to a specific version of a specific parser. That parser can be found in the <code>contrib/tree-sitter-cuda</code> directory, which is a submodule tracking the tree-sitter-cuda CUDA parser, which is based on the tree-sitter-cpp C++ parser, which is based on the tree-sitter-c C parser. CUDA is a superset of C++ is sort-of-a-superset of C and so Doxide currently uses the CUDA parser.</p> <p>From within the <code>contrib/tree-sitter-cuda</code> directory, run, for example: <pre><code>tree-sitter parse ../../demo/parsing.hpp\n</code></pre> This will parse the given file and output the parse tree to the terminal.</p>"},{"location":"contributing/#fixing-an-issue-a-walkthrough","title":"Fixing an issue: a walkthrough","text":"<p>This is a walkthrough of fixing issue #50 reported on the Doxide GitHub repository. The issue was that Doxide would miss variables that had an array type: <pre><code>/**\n * Test member variable of array type.\n */\nint arr[10];\n</code></pre> They would not be included in the documentation, and their documentation comment would be attributed to the next entity.</p> <p>To reproduce the issue:</p> <ol> <li> <p>Add code such as the above to <code>demo/parsing.hpp</code> as a test case.</p> </li> <li> <p>From the root directory of the code repository, build the Doxide documentation and publish it with MkDocs: <pre><code>doxide build\nmkdocs serve\n</code></pre></p> </li> <li> <p>Point your browser to <code>localhost:8000</code>. This is actually the whole Doxide website that you see at doxide.org. Confirm that the bug is apparent by navigating to the Demo &gt; Parsing section. (Of course you won't see issue #50 anymore---it has been fixed!)</p> </li> </ol> <p>To fix the problem, we can start by seeing how Tree-sitter parses the code. Back in the <code>contrib/tree-sitter-cuda</code> directory, put the above code in a file called <code>test.cpp</code> and run: <pre><code>tree-sitter parse test.cpp\n</code></pre> The output is: <pre><code>(translation_unit [0, 0] - [4, 0]\n  (comment [0, 0] - [2, 3])\n  (declaration [3, 0] - [3, 12]\n    type: (primitive_type [3, 0] - [3, 3])\n    declarator: (array_declarator [3, 4] - [3, 11]\n      declarator: (identifier [3, 4] - [3, 7])\n      size: (number_literal [3, 8] - [3, 10]))))\n</code></pre></p> <p>Tip</p> <p>We could run <code>tree-sitter parse ../../demo/parsing.hpp</code> instead, but the parse tree is much larger, and it may be difficult to track down the specific problem that way.</p> <p>Now, bring up the source file <code>src/doxide.cpp</code>, where Doxide's Tree-sitter queries are given as hard-coded strings in the <code>query_cpp</code> variable. These are patterns that match parse trees to select entities (e.g. types, variables, functions, macros, etc) from the source code to document. This section in particular plucks out variables and member variables: <pre><code>;; variable\n((declaration\n    declarator: [\n      (identifier) @name\n      (reference_declarator (identifier) @name)\n      (pointer_declarator (identifier) @name)\n      (init_declarator\n        declarator: [\n          (identifier) @name\n          (reference_declarator (identifier) @name)\n          (pointer_declarator (identifier) @name)\n        ]\n        value: (_) @value)\n    ]\n    default_value: (_)? @value\n  ) @variable)\n\n;; member variable\n((field_declaration\n    declarator: [\n      (field_identifier) @name\n      (reference_declarator (field_identifier) @name)\n      (pointer_declarator (field_identifier) @name)\n      (init_declarator\n        declarator: [\n          (identifier) @name\n          (field_identifier) @name\n          (reference_declarator (identifier) @name)\n          (reference_declarator (field_identifier) @name)\n          (pointer_declarator (identifier) @name)\n          (pointer_declarator (field_identifier) @name)\n        ]\n        value: (_) @value)\n    ]\n    default_value: (_)? @value\n  ) @variable)\n</code></pre></p> <p>Tip</p> <p>For more information on writing queries, see the Tree-sitter documentation for Pattern Matching with Queries.</p> <p>The query handles, among other things, <code>reference_declarator</code> and <code>pointer_declarator</code>, but we saw <code>array_declarator</code> in the parse tree above, and it does not seem to handle that. This looks like it might be the problem. So let's augment the query to handle <code>array_declarator</code>, following the same patterns as for <code>reference_declarator</code> and <code>pointer_declarator</code>: <pre><code>;; variable\n((declaration\n    declarator: [\n      (identifier) @name\n      (array_declarator (identifier) @name)\n      (reference_declarator (identifier) @name)\n      (pointer_declarator (identifier) @name)\n      (init_declarator\n        declarator: [\n          (identifier) @name\n          (array_declarator (identifier) @name)\n          (reference_declarator (identifier) @name)\n          (pointer_declarator (identifier) @name)\n        ]\n        value: (_) @value)\n    ]\n    default_value: (_)? @value\n  ) @variable)\n\n;; member variable\n((field_declaration\n    declarator: [\n      (field_identifier) @name\n      (array_declarator (field_identifier) @name)\n      (reference_declarator (field_identifier) @name)\n      (pointer_declarator (field_identifier) @name)\n      (init_declarator\n        declarator: [\n          (identifier) @name\n          (field_identifier) @name\n          (array_declarator (identifier) @name)\n          (array_declarator (field_identifier) @name)\n          (reference_declarator (identifier) @name)\n          (reference_declarator (field_identifier) @name)\n          (pointer_declarator (identifier) @name)\n          (pointer_declarator (field_identifier) @name)\n        ]\n        value: (_) @value)\n    ]\n    default_value: (_)? @value\n  ) @variable)\n</code></pre> Now rebuild and reinstall Doxide, rerun the test above (<code>doxide build</code>, <code>mkdocs serve</code>, inspect <code>localhost:8000</code>), and verify that the bug is now fixed.</p> <p>You can now commit the fix, including the test case added to <code>parsing.hpp</code> as a regression test for future, and submit a pull request on the GitHub repository.</p>"},{"location":"coverage/","title":"Code Coverage","text":"<p>Warning</p> <p>This is an experimental feature of Doxide that is still under development. Behavior is subject to change. See the blog post C++ Code Coverage with Gcov, Gcovr, and Doxide for more on the motivation and direction.</p> <p>Doxide can provide line data to contribute to more accurate code coverage reports. This source-code-derived data supplements binary-program-derived data from code coverage tools such as <code>gcov</code>. It is particularly useful for including function templates in code coverage reports, even when not instantiated in a compile; these are often omitted by other tools.</p> <p>To produce line data, simply run: <pre><code>doxide cover\n</code></pre> This will output JSON to <code>stdout</code>. The JSON is compatible with <code>gcov</code> and <code>gcovr</code> for producing code coverage reports. It provides information on all source files given in the configuration file, indicating those lines occupied by function and operator bodies (i.e. executable code), including function template bodies. These are all given zero execution counts. This can then be merged with a JSON report from <code>gcov</code> or <code>gcovr</code> that provides nonzero counts after program execution. This helps ensure that all source code lines are included in the denominator when computing code coverage percentages, and that uninstantiated function templates are marked as uncovered, rather than merely omitted.</p> <p>As this is still a developing feature, see the blog post C++ Code Coverage with Gcov, Gcovr, and Doxide for more information.</p> <p>Tip</p> <p>For the purposes of code coverage, you may wish to add <code>*.cpp</code> source files, not just header files, to your configuration file.</p>"},{"location":"getting-started/","title":"Initializing Doxide","text":"<p>Run, from within your source code directory: <pre><code>doxide init\n</code></pre> This will create a <code>doxide.yaml</code> configuration file, as well as some additional files for publishing with Material for MkDocs. To start, it is not necessary to modify any of these.</p> <p>Add at least <code>doxide.yaml</code> to version control, and the other files if you intend to use Material for MkDocs (highly recommended for a quick start---you can always try something else later).</p>"},{"location":"installation/","title":"Installing Doxide","text":"<p>Follow the instructions below for your operating system.</p>"},{"location":"installation/#linux","title":"Linux","text":"<p>Install Doxide from your package manager by adding appropriate repository for your Linux distribution below. If your distribution is not listed, you can instead install from source.</p>  Ubuntu 24.10 Oracular Oriole (amd64) <p>Install Doxide: <pre><code>echo 'deb http://download.indii.org/deb oracular main' | sudo tee /etc/apt/sources.list.d/indii.org.list\ncurl -fsSL https://download.indii.org/deb/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/indii.org.gpg &gt; /dev/null\nsudo apt update\nsudo apt install doxide\n</code></pre></p>  Ubuntu 24.04 Noble Numbat (amd64) <p>Install Doxide: <pre><code>echo 'deb http://download.indii.org/deb noble main' | sudo tee /etc/apt/sources.list.d/indii.org.list\ncurl -fsSL https://download.indii.org/deb/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/indii.org.gpg &gt; /dev/null\nsudo apt update\nsudo apt install doxide\n</code></pre></p>  Debian 12 Bookworm (amd64) <p>Install Doxide: <pre><code>echo 'deb http://download.indii.org/deb bookworm main' | sudo tee /etc/apt/sources.list.d/indii.org.list\ncurl -fsSL https://download.indii.org/deb/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/indii.org.gpg &gt; /dev/null\nsudo apt update\nsudo apt install doxide\n</code></pre></p>  Fedora 40 (x86_64) <p>Install Doxide: <pre><code>sudo dnf config-manager --add-repo https://download.indii.org/rpm/fedora/40/indii.org.repo\nsudo dnf update\nsudo dnf install doxide\n</code></pre></p>  Fedora 39 (x86_64) <p>Install Doxide: <pre><code>sudo dnf config-manager --add-repo https://download.indii.org/rpm/fedora/39/indii.org.repo\nsudo dnf update\nsudo dnf install doxide\n</code></pre></p>  openSUSE Tumbleweed (x86_64) <p>Install Doxide: <pre><code>sudo zypper addrepo https://download.indii.org/rpm/opensuse/tumbleweed/indii.org.repo\nsudo zypper refresh\nsudo zypper install doxide\n</code></pre></p>  Arch <p>Available from the Arch User Repository (AUR).</p> <p>Then install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre> See below for running MkDocs in a Python virtual environment instead.</p> <p>Material for MkDocs is included as a package in some Linux distributions, but typically an older version, and mileage may vary when using it with Doxide. As Material for MkDocs is updated frequently, it is recommended to install it with <code>pip</code> instead, to get the latest version.</p>"},{"location":"installation/#mac","title":"Mac","text":"<p>Install Homebrew if not already, then: <pre><code>brew tap lawmurray/all\nbrew install doxide\n</code></pre> Also install MkDocs and Material for MkDocs: <pre><code>pip install mkdocs mkdocs-material\n</code></pre> See below for running MkDocs in a Python virtual environment instead.</p>"},{"location":"installation/#windows","title":"Windows","text":"<p>First install Doxide via your preferred means:</p> Chocolatey <p>Install Chocolatey if not already, then: <pre><code>choco install doxide\n</code></pre></p> Installer <p> Download Doxide installer</p> <p>Checksum for the download above.</p> Standalone program <p>Download the program and put it somewhere on your <code>PATH</code> environment variable, so that you can access it from a terminal.</p> <p> Download Doxide standalone program</p> <p>Checksum for the download above.</p> Windows Subsystem for Linux <p>You can use Windows Subsystem for Linux and follow the instructions for your chosen Linux distribution above.</p> <p>Then install MkDocs and Material for MkDocs. For this you will need a working Python installation; if you are using Chocolatey, a simple way is <code>choco install python</code>. Then install: <pre><code>pip install mkdocs mkdocs-material\n</code></pre> See below for running MkDocs in a Python virtual environment instead.</p>"},{"location":"installation/#install-from-source","title":"Install from source","text":"<p>If a Doxide package is not available for your operating system or you have special requirements, you can install from source. See the README.md file for instructions.</p>"},{"location":"installation/#using-a-python-virtual-environment","title":"Using a Python virtual environment","text":"<p>To manage MkDocs and other Python dependencies per-project rather than system wide, you may like to use a Python virtual environment. Create it in your project directory: <pre><code>python3 -m venv venv\n</code></pre> Then enter it: <pre><code>source venv/bin/activate\n</code></pre> You can then run  <code>pip install mkdocs mkdocs-material</code> to install MkDocs (and other dependencies) into this virtual environment, and run <code>mkdocs</code> from within that virtual environment to publish your Doxide documentation. When finished, exit the environment with: <pre><code>deactivate\n</code></pre></p>"},{"location":"organizing/","title":"Organizing Documentation","text":"<p>Doxide organizes documentation by creating a main page, and one additional page for each namespace and type, organized hierarchically. Variables, functions and operators are added to the page of the namespace or class to which they belong. Macros are added to the main page. Only entities with documentation comments are included, with the exception of namespaces, which are included as long as they are non-empty.</p> <p>Organizing by namespace is not always appropriate. An additional (or alternative) structure may be provided with groups. It is also possible to add arbitrary extra pages.</p>"},{"location":"organizing/#groups","title":"Groups","text":"<p>Groups are for organizing documentation. A hierarchy of groups can be created by adding a  <code>groups</code> section to the <code>doxide.yaml</code> configuration file. Individual entities can then be assigne to a group by using the <code>@ingroup</code> command.</p> <p>Example</p> <p>Create a group by adding the following to the <code>doxide.yaml</code> configuration file: <pre><code>groups:\n  - name: example\n    title: Example\n    description: Description of the group.\n</code></pre> Assign an entity to the group using the <code>@ingroup</code> command in its documentation comment: <pre><code>/**\n * A function.\n *\n * @ingroup example\n */\nvoid f();\n</code></pre></p> <p>The final documentation displays the entity in the group, and not on the main page, a namespace page, or elsewhere. Members of a class may not be assigned to a group (<code>@ingroup</code> is simply ignored); they are always included on the associated class page.</p> <p>If the assignment of groups leaves a namespace empty, it is removed from the final documentation. This allows organizing with groups to completely replace organizing with namespaces.</p>"},{"location":"organizing/#extra-pages","title":"Extra pages","text":"<p>Extra pages can be added to the documentation simply by adding extra Markdown files to the output directory (default: <code>docs</code>).</p> <p>Doxide distinguishes its own output files in the output directory by adding <code>generator: doxide</code> to the YAML frontmatter. When running the commands <code>doxide build</code> and <code>doxide clean</code>, it deletes or overwrites such files without prompting. It will not touch other files.</p> <p>Danger</p> <p>Clearly, you do not want to put <code>generator: doxide</code> in your extra pages, or they will be deleted!</p>"},{"location":"parsing/","title":"Parsing Considerations","text":"<p>Doxide may report parsing errors in C++ source files, even if they are building successfully with a C++ compiler. This can occur for one of two reasons:</p> <ol> <li> <p>The parser used, Tree-sitter, is different to that of a compiler, and is designed more for language tools such as syntax highlighters. It may fail to parse code that is accepted by a compiler, or even accept code that is rejected by a compiler.</p> </li> <li> <p>Doxide does not run a preprocessor before parsing (it is unclear that this would even be desirable). Consequently, it may report parsing errors in situations where C++ syntax is only valid after preprocessing, due to the use of preprocessor macros.</p> </li> </ol> <p>To demonstrate the latter case, consider the following macro definition: <pre><code>#define NO_INLINE __attribute__((noinline))\n</code></pre> This could be used in a function declaration to direct the compiler not to inline the function: <pre><code>NO_INLINE int f(int x, int y);\n</code></pre> When the preprocessor is run, the function declaration expands to the valid C++ syntax: <pre><code>__attribute__((noinline)) int f(int x, int y);\n</code></pre> But prior to running the preprocessor, this is not valid C++ syntax. For example, a parser may consider <code>NO_INLINE</code> the return type and the following <code>int</code> an error.</p> <p>When a parse error is encountered, Doxide issues a warning, and applies some error recovery logic. If that error recovery logic fails, it simply skips the problematic tokens and continues the parse. In many cases such issues are inconsequential to the final documentation and can be safely ignored, e.g. a parse error in the body of a function will produce a warning, but have no affect on its documentation.</p> <p>Doxide has both manual and automated means for resolving these issues.</p>"},{"location":"parsing/#specifying-preprocessor-symbols","title":"Specifying preprocessor symbols","text":"<p>The <code>defines</code> section of the configuration file may be used to set preprocessor symbols and their replacements---a sort of rudimentary substitute for a preprocessor. This also allows the symbols to be replaced with different values in the documentation than in the code. For example, the <code>NO_INLINE</code> example above could be resolved with the following in the configuration file: <pre><code>defines:\n  NO_INLINE: __attribute__((noinline))\n</code></pre> or, if we prefer not to include such detail in the documentation, it could be erased with: <pre><code>defines:\n  NO_INLINE: \"\"\n</code></pre></p>"},{"location":"parsing/#autocorrection","title":"Autocorrection","text":"<p>Because parse errors are usually the result of preprocessor use, Doxide has specific error recovery logic to attempt to autocorrect them. </p> <ol> <li> <p>When an error is encountered on a node in the parse tree, it steps back through the siblings of that node one by one.</p> </li> <li> <p>If it finds a sibling that looks like a preprocessor symbol, it erases that sibling and retries the parse.</p> </li> <li> <p>Otherwise, it ignores the parse error and continues.</p> </li> </ol> <p>For the purposes of step 2, following the usual convention for preprocessor symbols, a sibling looks like a preprocessor symbol if it has at least three characters consisting of uppercase letters, underscores, and digits, but starting with an uppercase letter or underscore.</p>"},{"location":"questions-and-answers/","title":"Q &amp; A","text":""},{"location":"questions-and-answers/#why-the-name","title":"Why the name?","text":"<p>The Doxygen portmanteau is worthy of a riff.</p>"},{"location":"questions-and-answers/#what-does-the-logo-represent","title":"What does the logo represent?","text":"<p>The logo is an oxygen atom from a chemistry model kit, the two holes being where you would connect it to other atoms to form a molecule (an oxide!). It is deliberately oriented to look like the face of some cute character.</p>"},{"location":"questions-and-answers/#does-doxide-support-programming-languages-other-than-c","title":"Does Doxide support programming languages other than C++?","text":"<p>Not yet, but it very possibly can. It almost certainly works for C already, although is untested in that regard, and some tweaks to the presentation may be desirable. For other programming languages, if they can be parsed with Tree-sitter, support is possible in principle, and contributions are welcome.</p>"},{"location":"questions-and-answers/#what-are-some-alternatives-to-doxide","title":"What are some alternatives to Doxide?","text":"<p>The advantages of Doxide are a modern look, YAML configuration, Markdown output, and accurate parsing of C++ with Tree-sitter. If this does not appeal, there are some other alternatives, also open source:</p> <ol> <li>Doxygen. It's an institution. Highly configurable. The downside is that the output might be considered dated.</li> <li>Doxygen Awesome, which provides a fresh look for Doxygen via an alternative style sheet.</li> <li>The combination of Doxygen + Breathe + Sphinx, which also provides a fresh look, by taking the XML output of Doxygen, converting it to reStructuredText with Breathe, then converting it to HTML with Sphinx.</li> <li>MrDox, which aims to be a replacement for Doxygen, using the clang parser.</li> </ol>"},{"location":"running/","title":"Running Doxide","text":"<p>Build the Markdown documentation with: <pre><code>doxide build\n</code></pre> This will populate the output directory (default: <code>docs</code>).</p> <p>Tip</p> <p>You may see warning messages about parse errors. These are not necessarily fatal and may not affect the documentation at all. Some relate to the use of the preprocessor and can be fixed by defining symbols in the configuration file, see Parsing Considerations.</p> <p>To publish your documentation with Material for MkDocs, use: <pre><code>mkdocs build\n</code></pre> This will populate the <code>site</code> subdirectory with HTML, CSS, and JavaScript files. This directory can be published.</p> <p>To serve the documentation locally, use: <pre><code>mkdocs serve\n</code></pre> and point your browser to the URL reported, usually <code>localhost:8000</code>.</p>"},{"location":"writing/","title":"Writing Documentation","text":"<p>Entities in C++ source code (e.g. classes, functions, operators, variables, macros) are documented by adding a documentation comment immediately before or after their declaration. Various conventions are supported to distinguish documentation comments from regular comments. The most basic is to put the comment immediately before the declaration style it as <code>/** ... */</code> rather than <code>/* ... */</code>. The contents of the documentation can be formatted with Markdown, and include various commands using the syntax <code>@command</code>.</p> <p>Example</p> <pre><code>/**\n * An example class with documentation. It might include a list:\n * \n * - first item,\n * - second item, and\n * - third item,\n *\n * or even a table:\n *\n * | Heading 1 | Heading 2 |\n * | --------- | --------- |\n * | Content 1 | Content 2 |\n */\nclass Example {\n  //\n};\n\n/**\n * An example function with documentation. This time we use commands.\n *\n * @param x First argument.\n * @param y Second argument.\n *\n * @return The result.\n */\nint f(int x, int y);\n</code></pre> <p>If the documentation is placed immediately before the declaration of an entity, the following styles are supported:</p> <ul> <li><code>/** ... */</code></li> <li><code>/*! ... */</code></li> <li><code>/// ...</code></li> <li><code>//! ...</code></li> </ul> <p>If the documentation is placed immediately after the declaration, e.g. as an end-of-line comment, the following styles are supported:</p> <ul> <li><code>/**&lt; ... */</code></li> <li><code>/*!&lt; ... */</code></li> <li><code>///&lt; ...</code></li> <li><code>//!&lt; ...</code></li> </ul> <p>Example</p> <pre><code>enum Example {\n  FIRST,   ///&lt; First possible value\n  SECOND,  ///&lt; Second possible value\n  THIRD,   ///&lt; Third possible value\n};\n</code></pre>"},{"location":"writing/#commands","title":"Commands","text":"<p>The suggestion is to use Markdown wherever possible when writing documentation comments. Doxide provides a small set of commands that can be used to organize documentation (e.g. <code>@ingroup</code>) and to ensure consistent formatting for common elements (e.g. <code>@param</code>).</p> Command Description <code>@param name</code>, <code>@param[in] name</code>, <code>@param[out] name</code>, <code>@param[in,out] name</code> Document parameter <code>name</code>. The following paragraph is the description. The additional annotations <code>[in]</code>, <code>[out]</code> and <code>[in,out]</code> mark the parameter as an input (default), output or both input and output parameter. The following paragraph is the description. <code>@tparam</code> Document a template parameter <code>name</code>. <code>@return</code> Document the return value with the following paragraph. <code>@pre</code>, <code>@post</code> Document pre- or post-conditions with the following paragraph. <code>@throw name</code> Document an exception <code>name</code> with the following paragraph. <code>@see</code> Add a paragraph of \"see also\" references. The references themselves can be formatted in Markdown, using links if desired. <code>@anchor name</code> Insert anchor that can be linked to from elsewhere with the Markdown syntax <code>[text](#name)</code>. <code>@ingroup name</code> Add the entity to the group <code>name</code>. See organizing for more information. <code>@@</code> Escape: replaced with a single <code>@</code>. <code>@/</code> Escape: replaced with a single <code>/</code>. <p>Tip</p> <p>As a particular use case, comments within documentation comments are possible by escaping the closing sequence <code>*/</code> as <code>*@/</code>. This can be useful when providing example code within a documentation comment.</p>"},{"location":"writing/#migration-support","title":"Migration support","text":"<p>To assist in the migration of existing code bases to Doxide from other documentation tools, some additional support is provided:</p> <ul> <li> <p>The character <code>\\</code> may be used as an alternative to <code>@</code> to denote commands. When <code>\\</code> is used, unlike when <code>@</code> is used, no warning is given if the command is not found, and the command is output as-is. This is necessary to support LaTeX macros in mathematics without warning overload.</p> </li> <li> <p>The character <code>%</code> may be used as an escape for a single non-whitespace character (it is used to break automatic linking in Doxygen).</p> </li> </ul> <p>The following behaviors are implemented to assist in the migration of existing code bases. Recommended alternatives are provided for new code bases.</p> Command(s) Doxide behavior Recommended alternative <code>@e word</code>, <code>@em word</code>, <code>@a word</code> Replace with Markdown. Use Markdown emphasis: <code>*word*</code> <code>@b word</code> Replace with Markdown. Use Markdown bold: <code>**word**</code> <code>@c word</code>, <code>@p word</code> Replace with Markdown. Use Markdown inline code: <code>`word`</code> <code>@f$ ... @f$</code> Replace with Markdown. Use Markdown inline math: <code>$ ... $</code> <code>@f\\[ ... @f]</code> Replace with Markdown. Use Markdown display math: <code>$$ ... $$</code>. <code>@li</code>, <code>@arg</code> Replace with Markdown. Use Markdown unordered list item: <code>-</code> <code>@code ... @endcode</code>, <code>@verbatim ... @endverbatim</code> Replace with Markdown. Use Markdown display code: <code>``` ... ```</code>. <code>@attention</code>, <code>@bug</code>, <code>@example</code>, <code>@note</code>, <code>@todo</code>, <code>@warning</code>, <code>@remark</code>, <code>@remarks</code> Replace with Markdown. Use Markdown admonition: <code>!!! type</code>. <code>@ref name text</code> Replace with Markdown. Use Markdown link: <code>[text](#name)</code> <code>@image format file alt</code> Ignored. Use Markdown image: <code>![alt](file)</code> <code>@returns</code>, <code>@result</code> As <code>@return</code>. Use <code>@return</code>. <code>@throws</code> , <code>@exception</code> As <code>@throw</code>. Use <code>@throw</code>. <code>@sa</code> As <code>@see</code>. Use <code>@see</code>. <code>@brief</code>, <code>@short</code> Override one-sentence description. Make the first sentence of the documentation comment usable as a brief description. <code>@internal</code> Documentation comment and entity are hidden. Use a normal comment, rather than a documentation comment. <code>@defgroup</code> Ignored. Doxide handles groups differently, see below. <code>@file</code> Ignored. Doxide does not produce documentation for files. Incorporate into the documentation for another entity, or into a custom page. <code>@def MACRO</code> Ignored. Doxide does not run the preprocessor. Add a documentation comment immediately before the <code>#define</code>. <code>@var name</code>, <code>@fn name</code>, <code>@class name</code>, <code>@struct name</code>, <code>@union name</code>, <code>@enum name</code>,  <code>@typedef name</code>, <code>@namespace name</code>, <code>@interface name</code>, <code>@protocol name</code>, <code>@property name</code>. Ignored. Add a documentation comment immediately before the relevant entity."},{"location":"demo/","title":"Demo","text":"<p>These pages demonstrate some of the features of Doxide, and also serve as a test corpus. They are generated from the source files in the demo directory of the repository. This first page demonstrates how groups can be used to organize documentation.</p> Parsing Demonstration and test of some parsing capabilities, such as variables, functions, operators, classes, enums, namespaces, templates, concepts, macros, SFINAE, etc. Presentation Demonstration and test of some Markdown elements, such as code, syntax highlighting, tables, images, and admonitions. Developer Doxide's own source code documentation, for developers, but also serving as an example for others."},{"location":"demo/developer/","title":"Developer","text":"<p>Doxide's own source code documentation, for developers, but also serving as an example for others.</p>"},{"location":"demo/developer/#types","title":"Types","text":"Name Description Driver Driver for running commands Entity Entity in a C++ source file, e.g. variable, function, class, etc. EntityType Entity types. GcovGenerator Gcov JSON generator. MarkdownGenerator Markdown generator. Parser C++ source parser. Token Token. TokenType Documentation comment token types. Tokenizer Documentation comment tokenizer. YAMLNode Node in a YAML document. YAMLParser Parser for YAML config files and YAML frontmatter of Markdown files."},{"location":"demo/developer/#macros","title":"Macros","text":"Name Description error Print an error message and exit. warn Print a warning message."},{"location":"demo/developer/#variables","title":"Variables","text":"Name Description init_docs_javascripts_mathjax_js Contents of initial <code>docs/javascripts/mathjax.js</code> file. init_docs_overrides_partials_copyright_html Contents of initial <code>docs/overrides/partials/copyright.html</code> file. init_docs_stylesheets_doxide_css Contents of initial <code>docs/stylesheets/doxide.css</code> file. init_doxide_yaml Contents of initial <code>doxide.yaml</code> file. init_mkdocs_yaml Contents of initial <code>mkdocs.yaml</code> file. query_cpp Query for entities in C++ sources. regexes Documentation comment token patterns."},{"location":"demo/developer/#functions","title":"Functions","text":"Name Description copy_file_prompt Copy a file, prompting to confirm overwrite if the destination already exists. gulp Read in a whole file. tree_sitter_cpp Tree-sitter C++ language handle. tree_sitter_cuda Tree-sitter CUDA language handle. write_file Write a whole file. write_file_prompt Write a whole file, prompting to confirm overwrite if it already exists."},{"location":"demo/developer/#macro-details","title":"Macro Details","text":""},{"location":"demo/developer/#error","title":"error","text":"<p>#define error(msg)</p> <p>Print an error message and exit.</p>"},{"location":"demo/developer/#warn","title":"warn","text":"<p>#define warn(msg)</p> <p>Print a warning message.</p>"},{"location":"demo/developer/#variable-details","title":"Variable Details","text":""},{"location":"demo/developer/#init_docs_javascripts_mathjax_js","title":"init_docs_javascripts_mathjax_js","text":"<p>extern const char* init_docs_javascripts_mathjax_js</p> <p>Contents of initial <code>docs/javascripts/mathjax.js</code> file.</p>"},{"location":"demo/developer/#init_docs_overrides_partials_copyright_html","title":"init_docs_overrides_partials_copyright_html","text":"<p>extern const char* init_docs_overrides_partials_copyright_html</p> <p>Contents of initial <code>docs/overrides/partials/copyright.html</code> file.</p>"},{"location":"demo/developer/#init_docs_stylesheets_doxide_css","title":"init_docs_stylesheets_doxide_css","text":"<p>extern const char* init_docs_stylesheets_doxide_css</p> <p>Contents of initial <code>docs/stylesheets/doxide.css</code> file.</p>"},{"location":"demo/developer/#init_doxide_yaml","title":"init_doxide_yaml","text":"<p>extern const char* init_doxide_yaml</p> <p>Contents of initial <code>doxide.yaml</code> file.</p>"},{"location":"demo/developer/#init_mkdocs_yaml","title":"init_mkdocs_yaml","text":"<p>extern const char* init_mkdocs_yaml</p> <p>Contents of initial <code>mkdocs.yaml</code> file.</p>"},{"location":"demo/developer/#query_cpp","title":"query_cpp","text":"<p>extern const char* query_cpp</p> <p>Query for entities in C++ sources.</p>"},{"location":"demo/developer/#regexes","title":"regexes","text":"<p>static auto regexes</p> <p>Documentation comment token patterns. Order is important, as a match to an earlier pattern precludes a match to a later.</p>"},{"location":"demo/developer/#function-details","title":"Function Details","text":""},{"location":"demo/developer/#copy_file_prompt","title":"copy_file_prompt","text":"<p>void copy_file_prompt(const std::filesystem::path&amp; src, const std::filesystem::path&amp; dst)</p> <p>Copy a file, prompting to confirm overwrite if the destination already exists.</p>"},{"location":"demo/developer/#gulp","title":"gulp","text":"<p>std::string gulp(const std::filesystem::path&amp; src)</p> <p>Read in a whole file.</p>"},{"location":"demo/developer/#tree_sitter_cpp","title":"tree_sitter_cpp","text":"<p>const TSLanguage* tree_sitter_cpp()</p> <p>Tree-sitter C++ language handle.</p>"},{"location":"demo/developer/#tree_sitter_cuda","title":"tree_sitter_cuda","text":"<p>const TSLanguage* tree_sitter_cuda()</p> <p>Tree-sitter CUDA language handle.</p>"},{"location":"demo/developer/#write_file","title":"write_file","text":"<p>void write_file(const std::string&amp; contents, const std::filesystem::path&amp; dst)</p> <p>Write a whole file.</p>"},{"location":"demo/developer/#write_file_prompt","title":"write_file_prompt","text":"<p>void write_file_prompt(const std::string&amp; contents, const std::filesystem::path&amp; dst)</p> <p>Write a whole file, prompting to confirm overwrite if it already exists.</p>"},{"location":"demo/developer/Driver/","title":"Driver","text":"<p>class Driver</p> <p>Driver for running commands</p>"},{"location":"demo/developer/Driver/#variables","title":"Variables","text":"Name Description title Title. description Description. output Output directory. defines Defines. files Lists of files from config. global Global namespace."},{"location":"demo/developer/Driver/#functions","title":"Functions","text":"Name Description Driver Constructor. init Create a new configuration file. build Build documentation. clean Clean documentation. cover Output line coverage information. config Read in the configuration file. groups Recursively read groups from the configuration file."},{"location":"demo/developer/Driver/#variable-details","title":"Variable Details","text":""},{"location":"demo/developer/Driver/#defines","title":"defines","text":"<p>std::unordered_map&lt;std::string,std::string&gt; defines</p> <p>Defines.</p>"},{"location":"demo/developer/Driver/#description","title":"description","text":"<p>std::string description</p> <p>Description.</p>"},{"location":"demo/developer/Driver/#files","title":"files","text":"<p>std::unordered_set&lt;std::string&gt; files</p> <p>Lists of files from config.</p>"},{"location":"demo/developer/Driver/#global","title":"global","text":"<p>Entity global</p> <p>Global namespace.</p>"},{"location":"demo/developer/Driver/#output","title":"output","text":"<p>std::string output</p> <p>Output directory.</p>"},{"location":"demo/developer/Driver/#title","title":"title","text":"<p>std::string title</p> <p>Title.</p>"},{"location":"demo/developer/Driver/#function-details","title":"Function Details","text":""},{"location":"demo/developer/Driver/#driver_1","title":"Driver","text":"<p>Driver()</p> <p>Constructor.</p>"},{"location":"demo/developer/Driver/#build","title":"build","text":"<p>void build()</p> <p>Build documentation.</p>"},{"location":"demo/developer/Driver/#clean","title":"clean","text":"<p>void clean()</p> <p>Clean documentation.</p>"},{"location":"demo/developer/Driver/#config","title":"config","text":"<p>void config()</p> <p>Read in the configuration file.</p>"},{"location":"demo/developer/Driver/#cover","title":"cover","text":"<p>void cover()</p> <p>Output line coverage information.</p>"},{"location":"demo/developer/Driver/#groups","title":"groups","text":"<p>void groups(YAMLNode&amp; parentNode, Entity&amp; parentEntity)</p> <p>Recursively read groups from the configuration file.</p>"},{"location":"demo/developer/Driver/#init","title":"init","text":"<p>void init()</p> <p>Create a new configuration file.</p>"},{"location":"demo/developer/Entity/","title":"Entity","text":"<p>struct Entity</p> <p>Entity in a C++ source file, e.g. variable, function, class, etc.</p>"},{"location":"demo/developer/Entity/#types","title":"Types","text":"Name Description list_type Child entities are stored in a list, rather than map by name, to preserve declaration order."},{"location":"demo/developer/Entity/#variables","title":"Variables","text":"Name Description namespaces Child namespaces. groups Child groups. types Child types. concepts Child concepts. variables Child variables. functions Child functions. operators Child operators. enums Child enumerators. macros Child macros. name Entity name (e.g. name of variable, function, class). decl Entity declaration (e.g. function signature). docs Entity documentation. title Entity title. brief Alternative brief description. ingroup Group to which this belongs. file Source file of the entity. start_line Starting line of the entity. middle_line Starting line of the body. end_line Ending line of the entity. indent Current indent level of the documentation comment for this entity. type Entity type. hide Hide this node?"},{"location":"demo/developer/Entity/#functions","title":"Functions","text":"Name Description Entity Constructor. empty Is the entity empty? add Add child entity. merge Merge the children of another entity into this one. addToGroup Add child entity to a group. addToThis Add child entity."},{"location":"demo/developer/Entity/#variable-details","title":"Variable Details","text":""},{"location":"demo/developer/Entity/#brief","title":"brief","text":"<p>std::string brief</p> <p>Alternative brief description.</p>"},{"location":"demo/developer/Entity/#concepts","title":"concepts","text":"<p>list_type concepts</p> <p>Child concepts.</p>"},{"location":"demo/developer/Entity/#decl","title":"decl","text":"<p>std::string decl</p> <p>Entity declaration (e.g. function signature).</p>"},{"location":"demo/developer/Entity/#docs","title":"docs","text":"<p>std::string docs</p> <p>Entity documentation.</p>"},{"location":"demo/developer/Entity/#end_line","title":"end_line","text":"<p>int end_line</p> <p>Ending line of the entity.</p>"},{"location":"demo/developer/Entity/#enums","title":"enums","text":"<p>list_type enums</p> <p>Child enumerators.</p>"},{"location":"demo/developer/Entity/#file","title":"file","text":"<p>std::string file</p> <p>Source file of the entity.</p>"},{"location":"demo/developer/Entity/#functions_1","title":"functions","text":"<p>list_type functions</p> <p>Child functions.</p>"},{"location":"demo/developer/Entity/#groups","title":"groups","text":"<p>list_type groups</p> <p>Child groups.</p>"},{"location":"demo/developer/Entity/#hide","title":"hide","text":"<p>bool hide</p> <p>Hide this node?</p>"},{"location":"demo/developer/Entity/#indent","title":"indent","text":"<p>int indent</p> <p>Current indent level of the documentation comment for this entity.</p>"},{"location":"demo/developer/Entity/#ingroup","title":"ingroup","text":"<p>std::string ingroup</p> <p>Group to which this belongs.</p>"},{"location":"demo/developer/Entity/#macros","title":"macros","text":"<p>list_type macros</p> <p>Child macros.</p>"},{"location":"demo/developer/Entity/#middle_line","title":"middle_line","text":"<p>int middle_line</p> <p>Starting line of the body. If there is no body, e.g. this is a declaration only, then equals <code>end_line</code>.</p>"},{"location":"demo/developer/Entity/#name","title":"name","text":"<p>std::string name</p> <p>Entity name (e.g. name of variable, function, class).</p>"},{"location":"demo/developer/Entity/#namespaces","title":"namespaces","text":"<p>list_type namespaces</p> <p>Child namespaces.</p>"},{"location":"demo/developer/Entity/#operators","title":"operators","text":"<p>list_type operators</p> <p>Child operators.</p>"},{"location":"demo/developer/Entity/#start_line","title":"start_line","text":"<p>int start_line</p> <p>Starting line of the entity.</p>"},{"location":"demo/developer/Entity/#title","title":"title","text":"<p>std::string title</p> <p>Entity title. This is used for the title of the page.</p>"},{"location":"demo/developer/Entity/#type","title":"type","text":"<p>EntityType type</p> <p>Entity type.</p>"},{"location":"demo/developer/Entity/#types_1","title":"types","text":"<p>list_type types</p> <p>Child types.</p>"},{"location":"demo/developer/Entity/#variables_1","title":"variables","text":"<p>list_type variables</p> <p>Child variables.</p>"},{"location":"demo/developer/Entity/#function-details","title":"Function Details","text":""},{"location":"demo/developer/Entity/#entity_1","title":"Entity","text":"<p>Entity()</p> <p>Constructor.</p>"},{"location":"demo/developer/Entity/#add","title":"add","text":"<p>void add(const Entity&amp; o)</p> <p>Add child entity.</p> <code>o</code> Child entity. <p>If the child has <code>ingroup</code> set, then will search for and add to that group instead.</p>"},{"location":"demo/developer/Entity/#addtogroup","title":"addToGroup","text":"<p>bool addToGroup(const Entity&amp; o)</p> <p>Add child entity to a group.</p> <code>o</code> Child entity with <code>ingroup</code> set. Return True if a group of the given name was found, in which case <code>o</code> will have been added to it, false otherwise."},{"location":"demo/developer/Entity/#addtothis","title":"addToThis","text":"<p>void addToThis(const Entity&amp; o)</p> <p>Add child entity.</p> <code>o</code> Child entity. <p>If the child has <code>ingroup</code> set, it is ignored.</p>"},{"location":"demo/developer/Entity/#empty","title":"empty","text":"<p>bool empty() const</p> <p>Is the entity empty? i.e. does it have no children.</p>"},{"location":"demo/developer/Entity/#merge","title":"merge","text":"<p>void merge(const Entity&amp; o)</p> <p>Merge the children of another entity into this one.</p> <code>o</code> Other entity."},{"location":"demo/developer/EntityType/","title":"EntityType","text":"<p>enum class EntityType</p> <p>Entity types.</p>"},{"location":"demo/developer/GcovGenerator/","title":"GcovGenerator","text":"<p>class GcovGenerator</p> <p>Gcov JSON generator.</p>"},{"location":"demo/developer/GcovGenerator/#variables","title":"Variables","text":"Name Description coverage Line coverage information."},{"location":"demo/developer/GcovGenerator/#functions","title":"Functions","text":"Name Description generate Generate documentation. collate Collate coverage information for a single entity."},{"location":"demo/developer/GcovGenerator/#variable-details","title":"Variable Details","text":""},{"location":"demo/developer/GcovGenerator/#coverage","title":"coverage","text":"<p>std::map&lt;std::string,std::set&lt;int&gt;&gt; coverage</p> <p>Line coverage information. Keyed by source file name, value is set of covered lines.</p>"},{"location":"demo/developer/GcovGenerator/#function-details","title":"Function Details","text":""},{"location":"demo/developer/GcovGenerator/#collate","title":"collate","text":"<p>void collate(const Entity&amp; node)</p> <p>Collate coverage information for a single entity.</p>"},{"location":"demo/developer/GcovGenerator/#generate","title":"generate","text":"<p>void generate(const Entity&amp; node)</p> <p>Generate documentation.</p> <code>node</code> Root node."},{"location":"demo/developer/MarkdownGenerator/","title":"MarkdownGenerator","text":"<p>class MarkdownGenerator</p> <p>Markdown generator.</p>"},{"location":"demo/developer/MarkdownGenerator/#variables","title":"Variables","text":"Name Description files Set of files generated during the last call to generate()."},{"location":"demo/developer/MarkdownGenerator/#functions","title":"Functions","text":"Name Description generate Generate documentation. clean Clean up after generation, removing files from old runs. frontmatter Produce the YAML frontmatter for an entity. title Produce title for an entity. brief Produce brief description for an entity. line Reduce to a single line. indent Indent lines. stringify Sanitize for a string, escaping double quotes and backslashes. htmlize Sanitize for HTML, replacing special characters with entities. sanitize Sanitize for a file name or internal anchor. view Convert a list of entities to a list of pointers to entities, optionally sorting by name."},{"location":"demo/developer/MarkdownGenerator/#variable-details","title":"Variable Details","text":""},{"location":"demo/developer/MarkdownGenerator/#files","title":"files","text":"<p>std::unordered_set&lt;std::filesystem::path&gt; files</p> <p>Set of files generated during the last call to generate().</p>"},{"location":"demo/developer/MarkdownGenerator/#function-details","title":"Function Details","text":""},{"location":"demo/developer/MarkdownGenerator/#brief","title":"brief","text":"<p>static std::string brief(const Entity&amp; entity)</p> <p>Produce brief description for an entity.</p>"},{"location":"demo/developer/MarkdownGenerator/#clean","title":"clean","text":"<p>void clean(const std::filesystem::path&amp; output)</p> <p>Clean up after generation, removing files from old runs. Traverses the output directory, removing any Markdown files with 'generator: doxide' in their YAML frontmatter that were not generated by previous calls of <code>generate()</code>.</p> <code>output</code> Output directory."},{"location":"demo/developer/MarkdownGenerator/#frontmatter","title":"frontmatter","text":"<p>static std::string frontmatter(const Entity&amp; entity)</p> <p>Produce the YAML frontmatter for an entity.</p>"},{"location":"demo/developer/MarkdownGenerator/#generate","title":"generate","text":"<p>void generate(const std::filesystem::path&amp; dir, const Entity&amp; node)</p> <p>Generate documentation.</p> <code>output</code> Output directory. <code>node</code> Root node."},{"location":"demo/developer/MarkdownGenerator/#htmlize","title":"htmlize","text":"<p>static std::string htmlize(const std::string&amp; str)</p> <p>Sanitize for HTML, replacing special characters with entities. Also replaces some characters that might trigger Markdown formatting.</p>"},{"location":"demo/developer/MarkdownGenerator/#indent","title":"indent","text":"<p>static std::string indent(const std::string&amp; str)</p> <p>Indent lines.</p>"},{"location":"demo/developer/MarkdownGenerator/#line","title":"line","text":"<p>static std::string line(const std::string&amp; str)</p> <p>Reduce to a single line.</p>"},{"location":"demo/developer/MarkdownGenerator/#sanitize","title":"sanitize","text":"<p>static std::string sanitize(const std::string&amp; str)</p> <p>Sanitize for a file name or internal anchor.</p>"},{"location":"demo/developer/MarkdownGenerator/#stringify","title":"stringify","text":"<p>static std::string stringify(const std::string&amp; str)</p> <p>Sanitize for a string, escaping double quotes and backslashes.</p>"},{"location":"demo/developer/MarkdownGenerator/#title","title":"title","text":"<p>static std::string title(const Entity&amp; entity)</p> <p>Produce title for an entity.</p>"},{"location":"demo/developer/MarkdownGenerator/#view","title":"view","text":"<p>static std::list&lt;const Entity*&gt; view(const std::list&lt;Entity&gt;&amp; entities, const bool sort)</p> <p>Convert a list of entities to a list of pointers to entities, optionally sorting by name.</p> <code>entities</code> List of entities. <code>sort</code> Sort by name?"},{"location":"demo/developer/Parser/","title":"Parser","text":"<p>class Parser</p> <p>C++ source parser.</p>"},{"location":"demo/developer/Parser/#variables","title":"Variables","text":"Name Description defines Defines. parser C++ parser. query C++ query."},{"location":"demo/developer/Parser/#functions","title":"Functions","text":"Name Description Parser Constructor. ~Parser Destructor. parse Parse C++ source. preprocess Preprocess C++ source, replacing preprocessor macros as defined in the config file and attempting to recover from any parse errors. report Report errors after preprocessing. translate Translate documentation comment."},{"location":"demo/developer/Parser/#variable-details","title":"Variable Details","text":""},{"location":"demo/developer/Parser/#defines","title":"defines","text":"<p>std::unordered_map&lt;std::string,std::string&gt; defines</p> <p>Defines.</p>"},{"location":"demo/developer/Parser/#parser_1","title":"parser","text":"<p>TSParser* parser</p> <p>C++ parser.</p>"},{"location":"demo/developer/Parser/#query","title":"query","text":"<p>TSQuery* query</p> <p>C++ query.</p>"},{"location":"demo/developer/Parser/#function-details","title":"Function Details","text":""},{"location":"demo/developer/Parser/#parser_2","title":"Parser","text":"<p>Parser(const std::unordered_map&lt;std::string,std::string&gt;&amp; defines)</p> <p>Constructor.</p>"},{"location":"demo/developer/Parser/#parse","title":"parse","text":"<p>void parse(const std::string&amp; file, Entity&amp; global)</p> <p>Parse C++ source.</p> <code>file</code> C++ source file name. <code>global</code> Global namespace."},{"location":"demo/developer/Parser/#preprocess","title":"preprocess","text":"<p>std::string preprocess(const std::string&amp; file)</p> <p>Preprocess C++ source, replacing preprocessor macros as defined in the config file and attempting to recover from any parse errors. This is silent and does not report uncorrectable errors, these are reported later.</p> <code>file</code> C++ source file name. Return Preprocessed source."},{"location":"demo/developer/Parser/#report","title":"report","text":"<p>void report(const std::string&amp; file, const std::string&amp; in, TSTree* tree)</p> <p>Report errors after preprocessing.</p> <code>file</code> C++ source file name. <code>in</code> Preprocessed source. <code>tree</code> Parse tree for file."},{"location":"demo/developer/Parser/#translate","title":"translate","text":"<p>void translate(const std::string_view&amp; comment, Entity&amp; entity)</p> <p>Translate documentation comment.</p> <code>comment</code> Documentation comment. <code>entity</code> Entity to document."},{"location":"demo/developer/Parser/#parser_3","title":"~Parser","text":"<p>~Parser()</p> <p>Destructor.</p>"},{"location":"demo/developer/Token/","title":"Token","text":"<p>class Token</p> <p>Token.</p> <p>A token is only valid for the lifetime of the Tokenizer that produced it, as it contains a reference to a substring of the source file.</p>"},{"location":"demo/developer/Token/#variables","title":"Variables","text":"Name Description type Token type. first Iterator to first character. last Iterator to one-past-last character."},{"location":"demo/developer/Token/#functions","title":"Functions","text":"Name Description Token Constructor. str Get token as string. substr Get substring of the token as a string."},{"location":"demo/developer/Token/#variable-details","title":"Variable Details","text":""},{"location":"demo/developer/Token/#first","title":"first","text":"<p>std::string_view::const_iterator first</p> <p>Iterator to first character.</p>"},{"location":"demo/developer/Token/#last","title":"last","text":"<p>std::string_view::const_iterator last</p> <p>Iterator to one-past-last character.</p>"},{"location":"demo/developer/Token/#type","title":"type","text":"<p>TokenType type</p> <p>Token type.</p>"},{"location":"demo/developer/Token/#function-details","title":"Function Details","text":""},{"location":"demo/developer/Token/#token_1","title":"Token","text":"<p>Token(const TokenType&amp; type, const std::string_view::const_iterator&amp; first, const std::string_view::const_iterator&amp; last)</p> <p>Constructor.</p> <code>type</code> Token type. <code>first</code> Iterator to first character in source. <code>last</code> Iterator to one-past-last character in source."},{"location":"demo/developer/Token/#str","title":"str","text":"<p>std::string_view str() const</p> <p>Get token as string.</p>"},{"location":"demo/developer/Token/#substr","title":"substr","text":"<p>std::string_view substr(size_t pos = 0) const</p> <p>Get substring of the token as a string.</p> <code>pos</code> Position of the first character."},{"location":"demo/developer/TokenType/","title":"TokenType","text":"<p>enum TokenType : int</p> <p>Documentation comment token types. Closing delimiters must be one shift left of their opening counterparts.</p>"},{"location":"demo/developer/Tokenizer/","title":"Tokenizer","text":"<p>class Tokenizer</p> <p>Documentation comment tokenizer.</p>"},{"location":"demo/developer/Tokenizer/#variables","title":"Variables","text":"Name Description iter Iterator over source. end End of source."},{"location":"demo/developer/Tokenizer/#functions","title":"Functions","text":"Name Description Tokenizer Constructor. next Get the next token. consume Consume tokens until stopping criterion."},{"location":"demo/developer/Tokenizer/#variable-details","title":"Variable Details","text":""},{"location":"demo/developer/Tokenizer/#end","title":"end","text":"<p>std::string_view::const_iterator end</p> <p>End of source.</p>"},{"location":"demo/developer/Tokenizer/#iter","title":"iter","text":"<p>std::string_view::const_iterator iter</p> <p>Iterator over source.</p>"},{"location":"demo/developer/Tokenizer/#function-details","title":"Function Details","text":""},{"location":"demo/developer/Tokenizer/#tokenizer_1","title":"Tokenizer","text":"<p>Tokenizer(const std::string_view&amp; source)</p> <p>Constructor.</p> <code>comment</code> Comment to tokenize."},{"location":"demo/developer/Tokenizer/#consume","title":"consume","text":"<p>Token consume(const int stop = ANY)</p> <p>Consume tokens until stopping criterion.</p> <code>stop</code> Bitmask giving the token type on which to stop and return. Return Last token consumed. <p>Tokens are consumed until one is encountered with a type in <code>stop,</code> which is then returned. If <code>stop</code> is <code>ANY</code> then the next token is returned.</p> See interpret()"},{"location":"demo/developer/Tokenizer/#next","title":"next","text":"<p>Token next()</p> <p>Get the next token.</p> Return Next token. <p>The token is only valid for the lifetime of the Tokenizer, as it contains a reference to a substring of the source file. If no tokens remain (i.e. the end of the file is reached), a token with a type of <code>NONE</code> is returned.</p>"},{"location":"demo/developer/YAMLNode/","title":"YAMLNode","text":"<p>class YAMLNode</p> <p>Node in a YAML document.</p>"},{"location":"demo/developer/YAMLNode/#variables","title":"Variables","text":"Name Description contents Contents."},{"location":"demo/developer/YAMLNode/#functions","title":"Functions","text":"Name Description has Does this have a given key? isValue Is this a value? isValue Is there a value at a given path? isSequence Is this a sequence? isSequence Is there a sequence at a given path? isMapping Is this a mapping? isMapping Is there a mapping at a given path? value Get this as a value. value Get this as a value. value Get the value at a given path. value Get the value at a given path. sequence Get this as a sequence. sequence Get this as a sequence. sequence Get the sequence at a given path. sequence Get the sequence at a given path. mapping Get this as a mapping. mapping Get this as a mapping. mapping Get the mapping at a given path. mapping Get the mapping at a given path. set Set the value. setSequence Set as a sequence. setMapping Set as a mapping. push For a sequence, push an uninitialized node onto the end and return it. insert For a mapping, insert a key with an uninitialized value and return the value."},{"location":"demo/developer/YAMLNode/#variable-details","title":"Variable Details","text":""},{"location":"demo/developer/YAMLNode/#contents","title":"contents","text":"<p>variant_type contents</p> <p>Contents.</p>"},{"location":"demo/developer/YAMLNode/#function-details","title":"Function Details","text":""},{"location":"demo/developer/YAMLNode/#has","title":"has","text":"<p>bool has(const key_type&amp; key) const</p> <p>Does this have a given key?</p>"},{"location":"demo/developer/YAMLNode/#insert","title":"insert","text":"<p>YAMLNode&amp; insert(const key_type&amp; key)</p> <p>For a mapping, insert a key with an uninitialized value and return the value.</p>"},{"location":"demo/developer/YAMLNode/#ismapping","title":"isMapping","text":"<p>bool isMapping() const</p> <p>Is this a mapping?</p> <p>template&lt;class... Args&gt; bool isMapping(const key_type&amp; key, Args&amp;&amp;... keys) const</p> <p>Is there a mapping at a given path?</p> <code>key</code> Key. <code>keys...</code> Keys."},{"location":"demo/developer/YAMLNode/#issequence","title":"isSequence","text":"<p>bool isSequence() const</p> <p>Is this a sequence?</p> <p>template&lt;class... Args&gt; bool isSequence(const key_type&amp; key, Args&amp;&amp;... keys) const</p> <p>Is there a sequence at a given path?</p> <code>key</code> Key. <code>keys...</code> Keys."},{"location":"demo/developer/YAMLNode/#isvalue","title":"isValue","text":"<p>bool isValue() const</p> <p>Is this a value?</p> <p>template&lt;class... Args&gt; bool isValue(const key_type&amp; key, Args&amp;&amp;... keys) const</p> <p>Is there a value at a given path?</p> <code>key</code> Key. <code>keys...</code> Keys."},{"location":"demo/developer/YAMLNode/#mapping","title":"mapping","text":"<p>mapping_type&amp; mapping()</p> <p>Get this as a mapping.</p> <p>const mapping_type&amp; mapping() const</p> <p>Get this as a mapping.</p> <p>template&lt;class... Args&gt; mapping_type&amp; mapping(const key_type&amp; key, Args&amp;&amp;... keys)</p> <p>Get the mapping at a given path.</p> <code>key</code> Key. <code>keys...</code> Keys. Return The mapping. <p>template&lt;class... Args&gt; const mapping_type&amp; mapping(const key_type&amp; key, Args&amp;&amp;... keys) const</p> <p>Get the mapping at a given path.</p> <code>key</code> Key. <code>keys...</code> Keys. Return The mapping."},{"location":"demo/developer/YAMLNode/#push","title":"push","text":"<p>YAMLNode&amp; push()</p> <p>For a sequence, push an uninitialized node onto the end and return it.</p>"},{"location":"demo/developer/YAMLNode/#sequence","title":"sequence","text":"<p>sequence_type&amp; sequence()</p> <p>Get this as a sequence.</p> <p>const sequence_type&amp; sequence() const</p> <p>Get this as a sequence.</p> <p>template&lt;class... Args&gt; sequence_type&amp; sequence(const key_type&amp; key, Args&amp;&amp;... keys)</p> <p>Get the sequence at a given path.</p> <code>key</code> Key. <code>keys...</code> Keys. Return The sequence. <p>template&lt;class... Args&gt; const sequence_type&amp; sequence(const key_type&amp; key, Args&amp;&amp;... keys) const</p> <p>Get the sequence at a given path.</p> <code>key</code> Key. <code>keys...</code> Keys. Return The sequence."},{"location":"demo/developer/YAMLNode/#set","title":"set","text":"<p>void set(const variant_type&amp; contents)</p> <p>Set the value.</p>"},{"location":"demo/developer/YAMLNode/#setmapping","title":"setMapping","text":"<p>void setMapping()</p> <p>Set as a mapping.</p>"},{"location":"demo/developer/YAMLNode/#setsequence","title":"setSequence","text":"<p>void setSequence()</p> <p>Set as a sequence.</p>"},{"location":"demo/developer/YAMLNode/#value","title":"value","text":"<p>value_type&amp; value()</p> <p>Get this as a value.</p> <p>const value_type&amp; value() const</p> <p>Get this as a value.</p> <p>template&lt;class... Args&gt; value_type&amp; value(const key_type&amp; key, Args&amp;&amp;... keys)</p> <p>Get the value at a given path.</p> <code>key</code> Key. <code>keys...</code> Keys. Return The value. <p>template&lt;class... Args&gt; const value_type&amp; value(const key_type&amp; key, Args&amp;&amp;... keys) const</p> <p>Get the value at a given path.</p> <code>key</code> Key. <code>keys...</code> Keys. Return The value."},{"location":"demo/developer/YAMLParser/","title":"YAMLParser","text":"<p>class YAMLParser</p> <p>Parser for YAML config files and YAML frontmatter of Markdown files. Also works for JSON, as YAML is nowadays a superset of JSON.</p>"},{"location":"demo/developer/YAMLParser/#variables","title":"Variables","text":"Name Description parser LibYAML parser. event LibYAML event."},{"location":"demo/developer/YAMLParser/#functions","title":"Functions","text":"Name Description YAMLParser Constructor. ~YAMLParser Destructor. parse Parse a file."},{"location":"demo/developer/YAMLParser/#variable-details","title":"Variable Details","text":""},{"location":"demo/developer/YAMLParser/#event","title":"event","text":"<p>yaml_event_t event</p> <p>LibYAML event.</p>"},{"location":"demo/developer/YAMLParser/#parser","title":"parser","text":"<p>yaml_parser_t parser</p> <p>LibYAML parser.</p>"},{"location":"demo/developer/YAMLParser/#function-details","title":"Function Details","text":""},{"location":"demo/developer/YAMLParser/#yamlparser_1","title":"YAMLParser","text":"<p>YAMLParser()</p> <p>Constructor.</p>"},{"location":"demo/developer/YAMLParser/#parse","title":"parse","text":"<p>YAMLNode parse(const std::string&amp; file)</p> <p>Parse a file.</p> <code>file</code> File name. Return The contents of the file."},{"location":"demo/developer/YAMLParser/#yamlparser_2","title":"~YAMLParser","text":"<p>~YAMLParser()</p> <p>Destructor.</p>"},{"location":"demo/developer/Entity/list_type/","title":"list_type","text":"<p>using list_type = std::list&lt;Entity&gt;</p> <p>Child entities are stored in a list, rather than map by name, to preserve declaration order. They may be sorted by name on output.</p>"},{"location":"demo/parsing/","title":"Parsing","text":"<p>Demonstration and test of some parsing capabilities, such as variables, functions, operators, classes, enums, namespaces, templates, concepts, macros, SFINAE, etc.</p>"},{"location":"demo/parsing/#types","title":"Types","text":"Name Description Class Test class. ClassTemplate Test class template. ClassTemplateWithMembers Class template with members. ClassWithMembers Class with members. Enum Test enumeration. EnumAfter Test enumeration with values documented after. EnumClass Test scoped enumeration. EnumStruct Test scoped enumeration. ForwardClass Forward class declaration. Struct Test struct. StructTemplate Test struct template. TypeAlias Test type alias. TypeAliasTemplate Test type alias template. TypeDef Test typedef. Union Test union. UnionTemplate Test union template."},{"location":"demo/parsing/#concepts","title":"Concepts","text":"Name Description Concept Test concept. TrivialConcept Test trivial concept."},{"location":"demo/parsing/#macros","title":"Macros","text":"Name Description MACRO Test macro. MACRO_AFTER Test macro, documented after entity with <code>///</code> comment MACRO_WITH_ARGS Test macro with arguments. MACRO_WITH_ARGS_AFTER Test macro with arguments, documented after entity with <code>///</code> comment"},{"location":"demo/parsing/#variables","title":"Variables","text":"Name Description a Documented with <code>/** ... */</code> style preceding comment. arr1 Test variable of array type. arr2 Test variable of array type with initializer. b Documented with <code>///</code> style preceding comment. c Documented with <code>///</code> style preceding comment that wraps across multiple lines and has multiple paragraphs. d Documented after entity with <code>///</code> comment e Documentation comment with * and / characters. ptr1 Test variable of pointer type. ptr2 Test variable of pointer type with initializer. ref1 Test variable of reference type. ref2 Test variable of reference type with initializer. w Test variable. whitespace1 Comment where leading whitespace is important, using <code>/** ... */</code> style preceding comment. whitespace2 Comment where leading whitespace is important, using <code>///</code> style preceding comment. x Test variable with initializer. y Test variable with parenthetical initializer. z Test variable with brace initializer. \u03bb Test variable with unicode character."},{"location":"demo/parsing/#operators","title":"Operators","text":"Name Description operator+ Test operator. operator+ Test operator template. operator+ Test operator template with SFINAE. operator+ Test inline operator. operator+ Test inline operator template. operator+ Test inline operator template with SFINAE."},{"location":"demo/parsing/#functions","title":"Functions","text":"Name Description f Test function. f Test function that returns a reference. f Test function that returns a pointer. f Test function template. f Test function template with SFINAE. f Test inline function. f Test inline function template. f Test inline function template with SFINAE."},{"location":"demo/parsing/#concept-details","title":"Concept Details","text":""},{"location":"demo/parsing/#concept","title":"Concept","text":"<p>template&lt;class T&gt; concept Concept = std::is_arithmetic_v&lt;T&gt;</p> <p>Test concept.</p>"},{"location":"demo/parsing/#trivialconcept","title":"TrivialConcept","text":"<p>template&lt;class T&gt; concept TrivialConcept = true</p> <p>Test trivial concept.</p>"},{"location":"demo/parsing/#macro-details","title":"Macro Details","text":""},{"location":"demo/parsing/#macro","title":"MACRO","text":"<p>#define MACRO</p> <p>Test macro.</p>"},{"location":"demo/parsing/#macro_after","title":"MACRO_AFTER","text":"<p>#define MACRO_AFTER</p> <p>Test macro, documented after entity with <code>///</code> comment</p>"},{"location":"demo/parsing/#macro_with_args","title":"MACRO_WITH_ARGS","text":"<p>#define MACRO_WITH_ARGS(x, y)</p> <p>Test macro with arguments.</p>"},{"location":"demo/parsing/#macro_with_args_after","title":"MACRO_WITH_ARGS_AFTER","text":"<p>#define MACRO_WITH_ARGS_AFTER(x, y)</p> <p>Test macro with arguments, documented after entity with <code>///</code> comment</p>"},{"location":"demo/parsing/#variable-details","title":"Variable Details","text":""},{"location":"demo/parsing/#a","title":"a","text":"<p>int a</p> <p>Documented with <code>/** ... */</code> style preceding comment.</p>"},{"location":"demo/parsing/#arr1","title":"arr1","text":"<p>int arr1[10]</p> <p>Test variable of array type.</p>"},{"location":"demo/parsing/#arr2","title":"arr2","text":"<p>int arr2[10]</p> <p>Test variable of array type with initializer.</p>"},{"location":"demo/parsing/#b","title":"b","text":"<p>int b</p> <p>Documented with <code>///</code> style preceding comment. </p>"},{"location":"demo/parsing/#c","title":"c","text":"<p>int c</p> <p>Documented with <code>///</code> style preceding comment that wraps across multiple lines and has multiple paragraphs.</p> <p>This is the second paragraph.</p> <p>This is the third paragraph.</p>"},{"location":"demo/parsing/#d","title":"d","text":"<p>int d</p> <p>Documented after entity with <code>///</code> comment </p>"},{"location":"demo/parsing/#e","title":"e","text":"<p>int e</p> <p>Documentation comment with * and / characters.</p>"},{"location":"demo/parsing/#ptr1","title":"ptr1","text":"<p>int* ptr1</p> <p>Test variable of pointer type.</p>"},{"location":"demo/parsing/#ptr2","title":"ptr2","text":"<p>int* ptr2</p> <p>Test variable of pointer type with initializer.</p>"},{"location":"demo/parsing/#ref1","title":"ref1","text":"<p>int&amp; ref1</p> <p>Test variable of reference type.</p>"},{"location":"demo/parsing/#ref2","title":"ref2","text":"<p>int&amp; ref2</p> <p>Test variable of reference type with initializer.</p>"},{"location":"demo/parsing/#w","title":"w","text":"<p>int w</p> <p>Test variable.</p>"},{"location":"demo/parsing/#whitespace1","title":"whitespace1","text":"<p>int whitespace1</p> <p>Comment where leading whitespace is important, using <code>/** ... */</code> style preceding comment. Details should show code if indenting is correctly preserved.</p> <pre><code>int main();\n</code></pre>"},{"location":"demo/parsing/#whitespace2","title":"whitespace2","text":"<p>int whitespace2</p> <p>Comment where leading whitespace is important, using <code>///</code> style preceding comment. Details should show code if indenting is correctly preserved.</p> <pre><code>int main();\n</code></pre>"},{"location":"demo/parsing/#x","title":"x","text":"<p>int x</p> <p>Test variable with initializer.</p>"},{"location":"demo/parsing/#y","title":"y","text":"<p>int y</p> <p>Test variable with parenthetical initializer.</p>"},{"location":"demo/parsing/#z","title":"z","text":"<p>int z</p> <p>Test variable with brace initializer.</p>"},{"location":"demo/parsing/#_1","title":"\u03bb","text":"<p>int \u03bb</p> <p>Test variable with unicode character.</p>"},{"location":"demo/parsing/#operator-details","title":"Operator Details","text":""},{"location":"demo/parsing/#operator","title":"operator+","text":"<p>int operator+(int x, int y)</p> <p>Test operator.</p> <p>template&lt;class T&gt; T operator+(T x, T y)</p> <p>Test operator template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T operator+(T x, T y)</p> <p>Test operator template with SFINAE.</p> <p>inline int operator+(int x, int y)</p> <p>Test inline operator.</p> <p>template&lt;class T&gt; T operator+(T x, T y)</p> <p>Test inline operator template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T operator+(T x, T y)</p> <p>Test inline operator template with SFINAE.</p>"},{"location":"demo/parsing/#function-details","title":"Function Details","text":""},{"location":"demo/parsing/#f","title":"f","text":"<p>int f(int x, int y)</p> <p>Test function.</p> <p>int&amp; f(int x, int y)</p> <p>Test function that returns a reference.</p> <p>int* f(int x, int y)</p> <p>Test function that returns a pointer.</p> <p>template&lt;class T&gt; T f(T x, T y)</p> <p>Test function template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T f(T x, T y)</p> <p>Test function template with SFINAE.</p> <p>inline int f(int x, int y)</p> <p>Test inline function.</p> <p>template&lt;class T&gt; T f(T x, T y)</p> <p>Test inline function template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T f(T x, T y)</p> <p>Test inline function template with SFINAE.</p>"},{"location":"demo/parsing/Class/","title":"Class","text":"<p>class Class</p> <p>Test class.</p>"},{"location":"demo/parsing/ClassTemplate/","title":"ClassTemplate","text":"<p>template&lt;class T&gt; class ClassTemplate</p> <p>Test class template.</p>"},{"location":"demo/parsing/ClassTemplateWithMembers/","title":"ClassTemplateWithMembers","text":"<p>template&lt;class T&gt; class ClassTemplateWithMembers</p> <p>Class template with members.</p>"},{"location":"demo/parsing/ClassTemplateWithMembers/#variables","title":"Variables","text":"Name Description w Test member variable."},{"location":"demo/parsing/ClassTemplateWithMembers/#variable-details","title":"Variable Details","text":""},{"location":"demo/parsing/ClassTemplateWithMembers/#w","title":"w","text":"<p>int w</p> <p>Test member variable.</p>"},{"location":"demo/parsing/ClassWithMembers/","title":"ClassWithMembers","text":"<p>class ClassWithMembers</p> <p>Class with members.</p>"},{"location":"demo/parsing/ClassWithMembers/#types","title":"Types","text":"Name Description InnerClass Inner class. InnerEnum Inner enumeration. InnerTypeDef Inner typedef. InnerTypeAlias Inner type alias."},{"location":"demo/parsing/ClassWithMembers/#variables","title":"Variables","text":"Name Description x Test member variable. z Test member variable with initializer. arr1 Test member variable of array type. ref1 Test member variable of reference type. ptr1 Test member variable of pointer type. arr2 Test member variable of array type with initializer. ref2 Test member variable of reference type with initializer. ptr2 Test member variable of pointer type with initializer. \u03bb Test member variable with unicode character. escapee Attempt to move a member out of its class with <code>@ingroup</code>, but should remain in <code>ClassWithMembers</code>."},{"location":"demo/parsing/ClassWithMembers/#operators","title":"Operators","text":"Name Description operator+ Test member operator. operator+ Test member operator template. operator+ Test member function template with SFINAE. operator+ Test inline member operator. operator+ Test inline member operator template. operator+ Test inline member operator template with SFINAE. operator= Test assignment operator. int Test conversion operator declaration. int Test reference conversion operator declaration. int Test pointer conversion operator declaration. double Test conversion operator definition."},{"location":"demo/parsing/ClassWithMembers/#functions","title":"Functions","text":"Name Description f Test member function. f Test member function that returns a reference. f Test member function that returns a pointer. f Test member function template. f Test member function template with SFINAE. f Test inline member function. f Test inline member function template. f Test inline member function template with SFINAE."},{"location":"demo/parsing/ClassWithMembers/#variable-details","title":"Variable Details","text":""},{"location":"demo/parsing/ClassWithMembers/#arr1","title":"arr1","text":"<p>int arr1[10]</p> <p>Test member variable of array type.</p>"},{"location":"demo/parsing/ClassWithMembers/#arr2","title":"arr2","text":"<p>int arr2[10]</p> <p>Test member variable of array type with initializer.</p>"},{"location":"demo/parsing/ClassWithMembers/#escapee","title":"escapee","text":"<p>int escapee</p> <p>Attempt to move a member out of its class with <code>@ingroup</code>, but should remain in <code>ClassWithMembers</code>.</p>"},{"location":"demo/parsing/ClassWithMembers/#ptr1","title":"ptr1","text":"<p>int* ptr1</p> <p>Test member variable of pointer type.</p>"},{"location":"demo/parsing/ClassWithMembers/#ptr2","title":"ptr2","text":"<p>int* ptr2</p> <p>Test member variable of pointer type with initializer.</p>"},{"location":"demo/parsing/ClassWithMembers/#ref1","title":"ref1","text":"<p>int&amp; ref1</p> <p>Test member variable of reference type.</p>"},{"location":"demo/parsing/ClassWithMembers/#ref2","title":"ref2","text":"<p>int&amp; ref2</p> <p>Test member variable of reference type with initializer.</p>"},{"location":"demo/parsing/ClassWithMembers/#x","title":"x","text":"<p>int x</p> <p>Test member variable.</p>"},{"location":"demo/parsing/ClassWithMembers/#z","title":"z","text":"<p>int z</p> <p>Test member variable with initializer.</p> <p>Test member variable with brace initializer.</p>"},{"location":"demo/parsing/ClassWithMembers/#_1","title":"\u03bb","text":"<p>int \u03bb</p> <p>Test member variable with unicode character.</p>"},{"location":"demo/parsing/ClassWithMembers/#operator-details","title":"Operator Details","text":""},{"location":"demo/parsing/ClassWithMembers/#double","title":"double","text":"<p>operator double() const</p> <p>Test conversion operator definition.</p>"},{"location":"demo/parsing/ClassWithMembers/#int","title":"int","text":"<p>operator int() const</p> <p>Test conversion operator declaration.</p> <p>operator int&amp;() const</p> <p>Test reference conversion operator declaration.</p> <p>operator int*() const</p> <p>Test pointer conversion operator declaration.</p>"},{"location":"demo/parsing/ClassWithMembers/#operator","title":"operator+","text":"<p>int operator+(int x, int y)</p> <p>Test member operator.</p> <p>template&lt;class T&gt; T operator+(T x, T y)</p> <p>Test member operator template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T operator+(T x, T y)</p> <p>Test member function template with SFINAE.</p> <p>inline int operator+(int x, int y)</p> <p>Test inline member operator.</p> <p>template&lt;class T&gt; T operator+(T x, T y)</p> <p>Test inline member operator template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T operator+(T x, T y)</p> <p>Test inline member operator template with SFINAE.</p>"},{"location":"demo/parsing/ClassWithMembers/#operator_1","title":"operator=","text":"<p>ClassWithMembers&amp; operator=(const ClassWithMembers&amp; o)</p> <p>Test assignment operator.</p>"},{"location":"demo/parsing/ClassWithMembers/#function-details","title":"Function Details","text":""},{"location":"demo/parsing/ClassWithMembers/#f","title":"f","text":"<p>int f(int x, int y)</p> <p>Test member function.</p> <p>int&amp; f(int x, int y)</p> <p>Test member function that returns a reference.</p> <p>int* f(int x, int y)</p> <p>Test member function that returns a pointer.</p> <p>template&lt;class T&gt; T f(T x, T y)</p> <p>Test member function template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T f(T x, T y)</p> <p>Test member function template with SFINAE.</p> <p>inline int f(int x, int y)</p> <p>Test inline member function.</p> <p>template&lt;class T&gt; T f(T x, T y)</p> <p>Test inline member function template.</p> <p>template&lt;class T, std::enable_if_t&lt;std::is_integral_v&lt;T&gt;, int&gt; = 0&gt; T f(T x, T y)</p> <p>Test inline member function template with SFINAE.</p>"},{"location":"demo/parsing/Enum/","title":"Enum","text":"<p>enum Enum</p> <p>Test enumeration.</p> FIRST First possibility. SECOND Second possibility. THIRD Third possibility."},{"location":"demo/parsing/EnumAfter/","title":"EnumAfter","text":"<p>enum EnumAfter</p> <p>Test enumeration with values documented after.</p> FIRST First possibility, document after with <code>///</code> comment SECOND Second possibility, document after with <code>///</code> comment THIRD Third possibility, document after with <code>///</code> comment"},{"location":"demo/parsing/EnumClass/","title":"EnumClass","text":"<p>enum class EnumClass</p> <p>Test scoped enumeration.</p> FIRST First possibility. SECOND Second possibility. THIRD Third possibility."},{"location":"demo/parsing/EnumStruct/","title":"EnumStruct","text":"<p>enum struct EnumStruct</p> <p>Test scoped enumeration.</p> FIRST First possibility. SECOND Second possibility. THIRD Third possibility."},{"location":"demo/parsing/ForwardClass/","title":"ForwardClass","text":"<p>class ForwardClass</p> <p>Forward class declaration.</p>"},{"location":"demo/parsing/Struct/","title":"Struct","text":"<p>struct Struct</p> <p>Test struct.</p>"},{"location":"demo/parsing/StructTemplate/","title":"StructTemplate","text":"<p>template&lt;class T&gt; struct StructTemplate</p> <p>Test struct template.</p>"},{"location":"demo/parsing/TypeAlias/","title":"TypeAlias","text":"<p>using TypeAlias = int</p> <p>Test type alias.</p>"},{"location":"demo/parsing/TypeAliasTemplate/","title":"TypeAliasTemplate","text":"<p>template&lt;class T&gt; using TypeAliasTemplate = int</p> <p>Test type alias template.</p>"},{"location":"demo/parsing/TypeDef/","title":"TypeDef","text":"<p>typedef int TypeDef</p> <p>Test typedef.</p>"},{"location":"demo/parsing/Union/","title":"Union","text":"<p>union Union</p> <p>Test union.</p>"},{"location":"demo/parsing/UnionTemplate/","title":"UnionTemplate","text":"<p>template&lt;class T&gt; union UnionTemplate</p> <p>Test union template.</p>"},{"location":"demo/parsing/ClassWithMembers/InnerClass/","title":"InnerClass","text":"<p>class InnerClass</p> <p>Inner class.</p>"},{"location":"demo/parsing/ClassWithMembers/InnerClass/#variables","title":"Variables","text":"Name Description w Test member variable of inner class."},{"location":"demo/parsing/ClassWithMembers/InnerClass/#variable-details","title":"Variable Details","text":""},{"location":"demo/parsing/ClassWithMembers/InnerClass/#w","title":"w","text":"<p>int w</p> <p>Test member variable of inner class.</p>"},{"location":"demo/parsing/ClassWithMembers/InnerEnum/","title":"InnerEnum","text":"<p>enum InnerEnum</p> <p>Inner enumeration.</p> FIRST First possibility. SECOND Second possibility. THIRD Third possibility."},{"location":"demo/parsing/ClassWithMembers/InnerTypeAlias/","title":"InnerTypeAlias","text":"<p>using InnerTypeAlias = int</p> <p>Inner type alias.</p>"},{"location":"demo/parsing/ClassWithMembers/InnerTypeDef/","title":"InnerTypeDef","text":"<p>typedef int InnerTypeDef</p> <p>Inner typedef.</p>"},{"location":"demo/presentation/","title":"Presentation","text":"<p>Demonstration and test of some Markdown elements, such as code, syntax highlighting, tables, images, and admonitions.</p>"},{"location":"demo/presentation/#functions","title":"Functions","text":"Name Description f Function with documentation demonstrating various presentation features. g Function with documentation demonstrating various presentation features, this time using end-of-line comments. h Function demonstrating all possible annotations. i Function demonstrating all possible annotations, this time using end-of-line comments."},{"location":"demo/presentation/#function-details","title":"Function Details","text":""},{"location":"demo/presentation/#f","title":"f","text":"<p>int f(int x, int y)</p> <p>Function with documentation demonstrating various presentation features.</p>"},{"location":"demo/presentation/#lists","title":"Lists","text":"<p>Itemized list:</p> <ul> <li>Itemized list item.</li> <li>Itemized list item.<ul> <li>Nested itemized list item.</li> </ul> </li> <li>Itemized list item.</li> </ul> <p>Numbered list:</p> <ol> <li>Enumerated list item.</li> <li>Enumerated list item.<ul> <li>Nested itemized list item.</li> </ul> </li> <li>Enumerated list item.</li> </ol>"},{"location":"demo/presentation/#tables","title":"Tables","text":"Column 1 Column 2 Column 3 Row 1, Column 1 Row 1, Column 2 Row 1, Column 3 Row 2, Column 1 Row 2, Column 2 Row 2, Column 3 Row 3, Column 1 Row 3, Column 2 Row 3, Column 3"},{"location":"demo/presentation/#code","title":"Code","text":"<pre><code>void f(int x, int y);\n</code></pre> <pre><code>/* nested comment in code */\nvoid f(int x, int y);\n</code></pre>"},{"location":"demo/presentation/#images","title":"Images","text":""},{"location":"demo/presentation/#headings","title":"Headings","text":""},{"location":"demo/presentation/#heading-5","title":"Heading 5","text":""},{"location":"demo/presentation/#heading-6","title":"Heading 6","text":""},{"location":"demo/presentation/#admonitions","title":"Admonitions","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>"},{"location":"demo/presentation/#g","title":"g","text":"<p>int g(int x, int y)</p> <p>Function with documentation demonstrating various presentation features, this time using end-of-line comments.</p>"},{"location":"demo/presentation/#lists_1","title":"Lists","text":"<p>Itemized list:</p> <ul> <li>Itemized list item.</li> <li>Itemized list item.</li> <li>Itemized list item.</li> </ul> <p>Numbered list:</p> <ol> <li>Enumerated list item.</li> <li>Enumerated list item.</li> <li>Enumerated list item.</li> </ol>"},{"location":"demo/presentation/#tables_1","title":"Tables","text":"Column 1 Column 2 Column 3 Row 1, Column 1 Row 1, Column 2 Row 1, Column 3 Row 2, Column 1 Row 2, Column 2 Row 2, Column 3 Row 3, Column 1 Row 3, Column 2 Row 3, Column 3"},{"location":"demo/presentation/#code_1","title":"Code","text":"<pre><code>void f(int x, int y);\n</code></pre> <pre><code>/// nested comment in code\nvoid f(int x, int y);\n</code></pre>"},{"location":"demo/presentation/#images_1","title":"Images","text":""},{"location":"demo/presentation/#headings_1","title":"Headings","text":""},{"location":"demo/presentation/#heading-5_1","title":"Heading 5","text":""},{"location":"demo/presentation/#heading-6_1","title":"Heading 6","text":""},{"location":"demo/presentation/#admonitions_1","title":"Admonitions","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>"},{"location":"demo/presentation/#h","title":"h","text":"<p>template&lt;class T&gt; int h(int x, int y, int&amp; z, int&amp; w)</p> <p>Function demonstrating all possible annotations.</p> <code>T</code> Template parameter. <code>x</code> Input parameter. <code>y</code> Input parameter. <code>z</code> Output parameter. <code>w</code> Input-output parameter. <code>u</code> Input parameter with a description that spans across multiple lines. Return Return value. Pre-condition Pre-condition. Post-condition Post-condition. Throw Exception. See f"},{"location":"demo/presentation/#i","title":"i","text":"<p>template&lt;class T&gt; int i(int x, int y, int&amp; z, int&amp; w)</p> <p>Function demonstrating all possible annotations, this time using end-of-line comments.</p> <code>T</code> Template parameter. <code>x</code> Input parameter. <code>y</code> Input parameter. <code>z</code> Output parameter. <code>w</code> Input-output parameter. <code>u</code> Input parameter with a description that spans across multiple lines. Return Return value. Pre-condition Pre-condition. Post-condition Post-condition. Throw Exception. See f"}]}